blueprint:
  name: Frigate to Pushover Notification (Multi-Camera, Multi-Object)
  description: >
    Sends Frigate AI event notifications with images to Pushover.
    Choose cameras, object types, and optionally specify Pushover device targets.
    If the device field is left blank, all Pushover devices will be notified.
  domain: automation
  input:
    frigate_cameras:
      name: Frigate Cameras
      description: Select one or more Frigate camera entities.
      selector:
        entity:
          domain: camera
          integration: frigate
          multiple: true
    frigate_objects:
      name: Objects to Alert
      description: Select object types to trigger notifications.
      default: []
      selector:
        select:
          multiple: true
          options:
            - person
            - car
            - dog
            - cat
            - package
    pushover_targets:
      name: Pushover Device Names (optional)
      description: >
        Comma-separated list of Pushover device names to send notifications to.
        Leave blank to notify all devices.
      default: ""
      selector:
        text:

trigger:
  - platform: mqtt
    topic: frigate/events

variables:
  payload: "{{ trigger.payload_json }}"
  event_id: "{{ payload['after']['id'] }}"
  camera: "{{ payload['after']['camera'] }}"
  object: "{{ payload['after']['label'] | lower }}"
  ai_description: >
    {% set desc = payload['after'].get('sub_label', '') %}
    {% if desc %}
      {{ desc }}
    {% else %}
      {{ object | title }} detected
    {% endif %}
  snapshot_url: "http://10.10.10.81:5000/api/events/{{ event_id }}/snapshot.jpg"
  pushover_targets_list: >
    {% if pushover_targets|trim %}
      {{ pushover_targets.split(',') | map('trim') | list }}
    {% else %}
      []
    {% endif %}
  selected_cameras: >
    {%- set ns = namespace(cameras=[]) %}
    {%- for cam in frigate_cameras %}
      {%- set cam_name = states[cam].object_id %}
      {%- set ns.cameras = ns.cameras + [cam_name] %}
    {%- endfor %}
    {{ ns.cameras }}

condition:
  - condition: template
    value_template: "{{ camera in selected_cameras }}"
  - condition: template
    value_template: "{{ object in frigate_objects }}"

action:
  - service: notify.pushover
    data:
      message: "{{ ai_description }}"
      title: "Frigate: {{ object | title }} detected on {{ camera | replace('_', ' ') | title }}"
      data:
        attachment: "{{ snapshot_url }}"
        priority: 1
      target: "{{ pushover_targets_list if pushover_targets_list else none }}"

mode: queued
max: 10
