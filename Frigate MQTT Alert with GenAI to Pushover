blueprint:
  name: Frigate GenAI Pushover Notification
  description: Send AI-analyzed Frigate events to Pushover with images
  domain: automation
  input:
    frigate_cameras:
      name: Frigate Cameras
      description: Select cameras to monitor
      selector:
        device:
          integration: frigate
          multiple: true
    target_notify:
      name: Pushover Target
      description: Notification target for Pushover
      selector:
        target:
          entity:
            domain: notify
    frigate_objects:
      name: Objects to Detect
      description: Select objects to trigger notifications
      default: []
      selector:
        select:
          multiple: true
          options:
            - person
            - car
            - dog
            - cat
            - package
    genai_prompt:
      name: AI Prompt
      description: Customize the AI analysis prompt
      default: "Briefly describe this security camera event. Focus on movement, objects, and potential concerns. Keep response under 100 characters."
      selector:
        text:

trigger:
  - platform: mqtt
    topic: frigate/events
    payload: '{{ trigger.payload_json["after"]["label"] | lower }}'
    value_template: '{{ value_json["after"]["label"] | lower }}'

variables:
  event_id: '{{ trigger.payload_json["after"]["id"] }}'
  camera: '{{ trigger.payload_json["after"]["camera"] }}'
  object: '{{ trigger.payload_json["after"]["label"] | lower }}'
  zones: '{{ trigger.payload_json["after"]["entered_zones"] }}'
  snapshot_url: '/api/frigate/notifications/{{ event_id }}/thumbnail.jpg'

condition:
  - condition: template
    value_template: '{{ object in input.frigate_objects }}'
  - condition: trigger
    id: "{{ camera }}_{{ object }}"

action:
  - service: google_generative_ai_conversation.generate_content
    data:
      prompt: >
        {{ input.genai_prompt }}
        Camera: {{ camera }}
        Object: {{ object | title }}
        Zones: {{ zones | join(', ') }}
        Current time: {{ now().strftime("%H:%M") }}
      image_filename: '{{ snapshot_url }}'
    response_variable: ai_response

  - service: notify.pushover
    data:
      message: "{{ ai_response.text }}"
      title: "{{ object | title }} detected - {{ camera | replace('_', ' ') | title }}"
      data:
        attachment: '{{ snapshot_url }}'
        priority: 1
      target: !input target_notify

mode: queued
max: 10
