blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.4)
  author: valentinfrlch (modified for Telegram - rebuilt)
  homeassistant:
    min_version: 2024.10.0
  description: 'AI-powered camera event summaries with smart filtering, timeline storage, and memory integration.'
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          description: The chat ID to send notifications to
          default: "7882720724"
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          description: Add time to notification messages
          default: "24hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: Camera entities to monitor (can select multiple)
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          description: Motion sensors for cameras (same order as cameras). Leave empty if cameras change state directly.
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          description: State that triggers the automation for cameras
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Cooldown (Minutes)
          description: Wait time before allowing another notification for the same camera
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
    ai_section:
      name: AI Analysis Settings
      icon: mdi:brain
      input:
        provider:
          name: LLM Provider
          description: Provider for AI analysis
          selector:
            config_entry:
              integration: llmvision
        model:
          name: Model
          description: Model to use
          default: "gpt-4o-mini"
          selector:
            text: {}
        duration:
          name: Analysis Duration (Seconds)
          description: How long to record for analysis
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          description: Maximum number of frames to analyze
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          description: Resize images to this width (lower = faster, less detail)
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          description: Maximum length of AI response (higher = more detailed)
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        custom_prompt:
          name: Analysis Prompt
          description: Custom prompt for AI analysis (leave empty for default)
          default: ""
          selector:
            text:
              multiline: true
        use_memory:
          name: Use Memory
          description: Use information stored in memory to provide additional context (requires LLMVision memory setup)
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          description: Store events in Home Assistant timeline for review
          default: true
          selector:
            boolean: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          description: Use AI to filter out unimportant events
          default: true
          selector:
            boolean: {}
        minimum_importance:
          name: Minimum Importance Level
          description: Only send notifications for events at or above this level
          default: "time-sensitive"
          selector:
            select:
              options:
                - label: "All Events (No Filtering)"
                  value: "passive"
                - label: "Time-Sensitive and Critical Only"
                  value: "time-sensitive"
                - label: "Critical Events Only"
                  value: "critical"
        show_filtered_events:
          name: Show Filtered Events
          description: Send a brief message when events are filtered out
          default: false
          selector:
            boolean: {}

variables:
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  importance_filtering: !input importance_filtering
  minimum_importance: !input minimum_importance
  show_filtered_events: !input show_filtered_events
  custom_prompt: !input custom_prompt
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  
  is_manual_trigger: "{{ trigger is not defined }}"
  
  # Time formatting
  time_suffix: >
    {% if notification_time == "12hour" %}
      {{ " at " + now().strftime("%-I:%M %p") }}
    {% elif notification_time == "24hour" %}
      {{ " at " + now().strftime("%H:%M") }}
    {% else %}
      {{ "" }}
    {% endif %}
  
  # Determine which camera triggered the event
  triggered_camera: >
    {% if is_manual_trigger %}
      {{ camera_entities[0] }}
    {% elif trigger.entity_id.startswith('camera.') %}
      {{ trigger.entity_id }}
    {% elif motion_sensors and trigger.entity_id in motion_sensors %}
      {% set sensor_index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[sensor_index] if sensor_index < camera_entities|length else camera_entities[0] }}
    {% else %}
      {{ camera_entities[0] }}
    {% endif %}
  
  camera_name: '{{ triggered_camera.replace("camera.", "").replace("_", " ").title() }}'
  snapshot_path: '/config/www/snapshots/{{ triggered_camera.replace("camera.", "") }}_snapshot.jpg'
  
  # Cooldown check
  cooldown_key: 'last_notification_{{ triggered_camera.replace("camera.", "").replace(".", "_") }}'
  last_notification_time: >
    {% set state_obj = states('input_datetime.' + cooldown_key) %}
    {% if state_obj != 'unknown' and state_obj != 'unavailable' %}
      {{ as_timestamp(state_obj) }}
    {% else %}
      {{ 0 }}
    {% endif %}
  
  cooldown_active: >
    {{ not is_manual_trigger and 
       (as_timestamp(now()) - last_notification_time|float) < (cooldown_minutes * 60) }}

  # AI Prompts
  importance_prompt: >
    Analyze this security camera image and classify the event importance level.
    
    Respond with ONLY one of these words:
    - "passive" for unimportant events (shadows, leaves, small animals, normal background activity)
    - "time-sensitive" for notable events (people, vehicles, delivery persons, visitors)  
    - "critical" for urgent situations (suspicious behavior, potential security threats, emergencies)
    
    Consider the context and whether a homeowner would want to be notified about this event.

  analysis_prompt: >
    {% if custom_prompt != "" %}
      {{ custom_prompt }}
    {% else %}
      Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. 
      Be specific about what is happening, the number of people/vehicles, their actions, and location in the frame.
      Keep your response concise but informative.
    {% endif %}

max_exceeded: silent
mode: parallel
max: 10

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state  
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger

action:
# Manual trigger notification
- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "üîß Manual trigger for {{ camera_name }}{{ time_suffix }}"

# Check cooldown (skip for manual triggers)
- if:
  - condition: template
    value_template: "{{ cooldown_active }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "‚è∞ {{ camera_name }} cooldown active ({{ cooldown_minutes }}min){{ time_suffix }} - skipping"
  - stop: "Cooldown active for {{ camera_name }}"

# Create cooldown helper if it doesn't exist
- service: input_datetime.set_datetime
  target:
    entity_id: "input_datetime.{{ cooldown_key }}"
  data:
    datetime: "{{ now().isoformat() }}"
  continue_on_error: true

# Take snapshot for importance analysis
- service: camera.snapshot
  target:
    entity_id: "{{ triggered_camera }}"
  data:
    filename: "{{ snapshot_path }}"

# Importance Classification (if enabled)
- if:
  - condition: template
    value_template: "{{ importance_filtering and not is_manual_trigger }}"
  then:
  - service: llmvision.image_analyzer
    data:
      image_entity: ["{{ triggered_camera }}"]
      provider: !input provider
      model: !input model
      message: "{{ importance_prompt }}"
      include_filename: false
      target_width: !input target_width
      max_tokens: 5
    response_variable: importance_result

  # Check if event meets minimum importance threshold
  - if:
    - condition: template
      value_template: >
        {% set detected = importance_result.response_text.lower().strip() %}
        {% set min_level = minimum_importance %}
        {% if min_level == "passive" %}
          {{ true }}
        {% elif min_level == "time-sensitive" %}
          {{ detected in ["time-sensitive", "critical"] }}
        {% elif min_level == "critical" %}
          {{ detected == "critical" }}
        {% else %}
          {{ true }}
        {% endif %}
    then:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: "üîç {{ camera_name }} - Importance: {{ importance_result.response_text.title() }} ‚úì{{ time_suffix }}"
    else:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "üîá {{ camera_name }} - Filtered ({{ importance_result.response_text }}){{ time_suffix }} - no alert sent"
    - stop: "Event filtered - importance too low"

# Send initial notification with snapshot
- service: telegram_bot.send_photo
  data:
    target: !input telegram_target
    file: "{{ snapshot_path }}"
    caption: "üìπ {{ camera_name }} detected motion{{ time_suffix }} - analyzing..."

# Main AI Analysis
- service: llmvision.stream_analyzer
  data:
    image_entity: ["{{ triggered_camera }}"]
    duration: !input duration
    provider: !input provider
    model: !input model
    message: "{{ analysis_prompt }}"
    max_frames: !input max_frames
    target_width: !input target_width
    max_tokens: !input max_tokens
    use_memory: !input use_memory
    remember: !input store_timeline
    generate_title: !input store_timeline
    expose_images: !input store_timeline
  response_variable: analysis

# Send detailed analysis result
- service: telegram_bot.send_message
  data:
    target: !input telegram_target
    message: "üîç {{ camera_name }}{{ time_suffix }}: {{ analysis.response_text }}"

# Update cooldown timestamp
- service: input_datetime.set_datetime
  target:
    entity_id: "input_datetime.{{ cooldown_key }}"
  data:
    datetime: "{{ now().isoformat() }}"
  continue_on_error: true
