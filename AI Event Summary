blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.7.6.4)
  description: >
    Advanced Frigate/HA AI-powered camera event notifications with LLM analysis,
    object filtering, and comprehensive debugging. Supports multiple AI providers
    with fallback, enhanced Frigate integration, and detailed diagnostics.
  domain: automation
  input:
    telegram_target:
      name: Telegram Chat ID
      description: Chat ID for Telegram notifications
      selector:
        text:
    camera_entities:
      name: Camera Entities
      description: List of camera entities to monitor
      selector:
        entity:
          multiple: true
          filter:
            domain: camera
    motion_sensors:
      name: Motion Sensors (Optional)
      description: Binary sensors for motion detection (optional, can be empty)
      default: []
      selector:
        entity:
          multiple: true
          filter:
            domain: binary_sensor
    frigate_base_url:
      name: Frigate Base URL
      description: Base URL for Frigate server
      selector:
        text:
    provider:
      name: Primary AI Provider
      description: Primary LLM provider for image analysis
      selector:
        text:
    model:
      name: Primary AI Model
      description: AI model to use for primary analysis
      default: "gemini-2.5-flash"
      selector:
        text:
    ai_prompt:
      name: AI Analysis Prompt
      description: Custom prompt for AI image analysis
      default: "Analyze this security camera image and provide a detailed summary of any people, vehicles, or important activity visible."
      selector:
        text:
          multiline: true
    enable_secondary_provider:
      name: Enable Secondary Provider
      description: Enable fallback to secondary AI provider
      default: false
      selector:
        boolean:
    secondary_provider:
      name: Secondary AI Provider
      description: Fallback AI provider
      default: ""
      selector:
        text:
    secondary_model_list:
      name: Secondary Model List
      description: Comma-separated list of secondary models to try
      default: "llama-3.2-90b-vision-instruct"
      selector:
        text:
    use_frigate_snapshots:
      name: Use Frigate Enhanced Snapshots
      description: Use Frigate annotated snapshots with bounding boxes
      default: true
      selector:
        boolean:
    use_object_filter:
      name: Enable Object Filtering
      description: Filter notifications based on detected objects
      default: false
      selector:
        boolean:
    required_objects:
      name: Required Objects
      description: Comma-separated list of objects that must be present (e.g., person,car,dog)
      default: ""
      selector:
        text:
    blocked_objects:
      name: Blocked Objects
      description: Comma-separated list of objects that will block notifications
      default: ""
      selector:
        text:
    cooldown_minutes:
      name: Cooldown Period (Minutes)
      description: Minimum time between notifications for the same camera
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
    delay_notification:
      name: Notification Delay (Seconds)
      description: Delay before sending notification (allows motion to settle)
      default: 30
      selector:
        number:
          min: 0
          max: 300
          step: 5
    wait_for_frigate:
      name: Wait for Frigate (Seconds)
      description: Time to wait for Frigate snapshot to be available
      default: 15
      selector:
        number:
          min: 5
          max: 60
          step: 5
    duration:
      name: Clip Duration (Seconds)
      description: Duration for video clips
      default: 15
      selector:
        number:
          min: 5
          max: 60
          step: 5
    max_frames:
      name: Maximum Frames
      description: Maximum number of frames for analysis
      default: 10
      selector:
        number:
          min: 1
          max: 30
          step: 1
    max_tokens:
      name: Maximum Tokens
      description: Maximum tokens for AI response
      default: 150
      selector:
        number:
          min: 50
          max: 500
          step: 10
    show_api_errors:
      name: Show API Errors
      description: Send Telegram notifications for API errors
      default: true
      selector:
        boolean:
    show_fallback_notifications:
      name: Show Fallback Notifications
      description: Notify when falling back to secondary providers
      default: true
      selector:
        boolean:
    enable_diagnostics:
      name: Enable Diagnostics
      description: Enable detailed diagnostic messages
      default: false
      selector:
        boolean:
    debug_message_updates:
      name: Debug Message Updates
      description: Show debug information about message processing
      default: false
      selector:
        boolean:
    debug_object_filtering:
      name: Debug Object Filtering
      description: Show debug information about object filtering decisions
      default: false
      selector:
        boolean:
    debug_full_payload:
      name: Debug Full Payload
      description: Show complete MQTT/trigger payload in notifications
      default: false
      selector:
        boolean:

variables:
  telegram_target: !input telegram_target
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  frigate_base_url: !input frigate_base_url
  provider: !input provider
  model: !input model
  ai_prompt: !input ai_prompt
  enable_secondary_provider: !input enable_secondary_provider
  secondary_provider: !input secondary_provider
  secondary_model_list: !input secondary_model_list
  use_frigate_snapshots: !input use_frigate_snapshots
  use_object_filter: !input use_object_filter
  required_objects: !input required_objects
  blocked_objects: !input blocked_objects
  cooldown_minutes: !input cooldown_minutes
  delay_notification: !input delay_notification
  wait_for_frigate: !input wait_for_frigate
  duration: !input duration
  max_frames: !input max_frames
  max_tokens: !input max_tokens
  show_api_errors: !input show_api_errors
  show_fallback_notifications: !input show_fallback_notifications
  enable_diagnostics: !input enable_diagnostics
  debug_message_updates: !input debug_message_updates
  debug_object_filtering: !input debug_object_filtering
  debug_full_payload: !input debug_full_payload
  
  # Processing variables
  camera_name: >
    {% if trigger.entity_id is defined %}
      {{ state_attr(trigger.entity_id, 'friendly_name') | default(trigger.entity_id.split('.')[1], true) }}
    {% elif trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.camera | default('unknown', true) }}
    {% else %}
      unknown
    {% endif %}
  
  # Extract objects from MQTT payload for filtering
  detected_objects: >
    {% if trigger.payload_json is defined %}
      {% if trigger.payload_json.after is defined and trigger.payload_json.after.data is defined %}
        {% set objects = trigger.payload_json.after.data.objects | default([]) %}
        {{ objects | map(attribute='label') | list | join(',') }}
      {% elif trigger.payload_json.type is defined and trigger.payload_json.type == 'new' %}
        {{ trigger.payload_json.data.objects | default([]) | map(attribute='label') | list | join(',') }}
      {% else %}
        ""
      {% endif %}
    {% else %}
      ""
    {% endif %}
  
  # Object filtering logic
  objects_match_filter: >
    {% set detected = detected_objects.split(',') | reject('equalto', '') | list %}
    {% set required = required_objects.split(',') | reject('equalto', '') | map('trim') | list %}
    {% set blocked = blocked_objects.split(',') | reject('equalto', '') | map('trim') | list %}
    
    {% if not use_object_filter %}
      true
    {% elif detected | length == 0 %}
      {% if required | length > 0 %}
        false
      {% else %}
        true
      {% endif %}
    {% else %}
      {% set has_required = required | length == 0 or (required | select('in', detected) | list | length > 0) %}
      {% set has_blocked = blocked | length > 0 and (blocked | select('in', detected) | list | length > 0) %}
      {{ has_required and not has_blocked }}
    {% endif %}

trigger:
  - platform: state
    entity_id: !input camera_entities
    to: "recording"
  - platform: state 
    entity_id: !input motion_sensors
    to: "on"
  - platform: mqtt
    topic: "frigate/events"
  - platform: mqtt
    topic: "frigate/+/+/snapshot"

condition:
  - condition: template
    value_template: "{{ objects_match_filter }}"

action:
  # Debug payload information if enabled
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ debug_full_payload }}"
        sequence:
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_target }}"
              message: |
                üêõ DEBUG - Full Payload:
                Trigger: {{ trigger.platform }}
                Entity: {{ trigger.entity_id | default('N/A') }}
                Topic: {{ trigger.topic | default('N/A') }}
                Payload: {{ trigger.payload_json | default('N/A') | string | truncate(500) }}

  # Debug object filtering if enabled
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ debug_object_filtering and use_object_filter }}"
        sequence:
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_target }}"
              message: |
                üîç Object Filter Debug:
                Camera: {{ camera_name }}
                Detected: {{ detected_objects if detected_objects else 'None' }}
                Required: {{ required_objects if required_objects else 'None' }}
                Blocked: {{ blocked_objects if blocked_objects else 'None' }}
                Filter Result: {{ 'PASS' if objects_match_filter else 'FAIL' }}

  # Apply notification delay
  - delay:
      seconds: "{{ delay_notification }}"

  # Wait for Frigate snapshot
  - delay:
      seconds: "{{ wait_for_frigate }}"

  # Send initial notification with image
  - choose:
      # Use Frigate enhanced snapshot
      - conditions:
          - condition: template
            value_template: "{{ use_frigate_snapshots and trigger.payload_json is defined and trigger.payload_json.after is defined }}"
        sequence:
          - service: telegram_bot.send_photo
            data:
              target: "{{ telegram_target }}"
              url: "{{ frigate_base_url }}/api/events/{{ trigger.payload_json.after.id }}/snapshot.jpg"
              caption: |
                üì∑ {{ camera_name }} - Motion Detected
                üïê {{ now().strftime('%H:%M:%S') }}
                {% if detected_objects %}üéØ Objects: {{ detected_objects }}{% endif %}
                
                ü§ñ AI Analysis in progress...
    default:
      # Use standard camera snapshot
      - service: telegram_bot.send_photo
        data:
          target: "{{ telegram_target }}"
          camera_entity: "{{ camera_entities[0] if camera_entities else 'camera.unknown' }}"
          caption: |
            üì∑ {{ camera_name }} - Motion Detected  
            üïê {{ now().strftime('%H:%M:%S') }}
            {% if detected_objects %}üéØ Objects: {{ detected_objects }}{% endif %}
            
            ü§ñ AI Analysis in progress...

  # AI Analysis with fallback logic
  - choose:
      # Primary AI provider attempt
      - conditions:
          - condition: template
            value_template: "{{ provider != '' }}"
        sequence:
          - service: llmvision.image_analyzer
            data:
              provider: "{{ provider }}"
              model: "{{ model }}"
              message: "{{ ai_prompt }}"
              max_tokens: "{{ max_tokens }}"
              image_entity: "{{ camera_entities[0] if camera_entities else 'camera.unknown' }}"
            response_variable: ai_response
          
          # Send AI analysis result
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_target }}"
              message: |
                ü§ñ AI Analysis ({{ model }}):
                {{ ai_response.response_text | default('Analysis failed') }}
                
                {% if debug_message_updates %}
                üîß Provider: {{ provider }}
                ‚è±Ô∏è Completed: {{ now().strftime('%H:%M:%S') }}
                {% endif %}

      # Fallback to secondary provider if enabled
      - conditions:
          - condition: template
            value_template: "{{ enable_secondary_provider and secondary_provider != '' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ show_fallback_notifications }}"
                sequence:
                  - service: telegram_bot.send_message
                    data:
                      target: "{{ telegram_target }}"
                      message: "‚ö†Ô∏è Switching to backup AI provider..."
          
          - service: llmvision.image_analyzer
            data:
              provider: "{{ secondary_provider }}"
              model: "{{ secondary_model_list.split(',')[0] | trim }}"
              message: "{{ ai_prompt }}"
              max_tokens: "{{ max_tokens }}"
              image_entity: "{{ camera_entities[0] if camera_entities else 'camera.unknown' }}"
            response_variable: secondary_ai_response
          
          - service: telegram_bot.send_message
            data:
              target: "{{ telegram_target }}"
              message: |
                ü§ñ AI Analysis (Backup):
                {{ secondary_ai_response.response_text | default('Backup analysis failed') }}

    # Final fallback - simple notification
    default:
      - service: telegram_bot.send_message
        data:
          target: "{{ telegram_target }}"
          message: |
            ‚ö†Ô∏è {{ camera_name }} motion detected - AI analysis unavailable
            üïê {{ now().strftime('%H:%M:%S') }}
            {% if detected_objects %}üéØ Objects: {{ detected_objects }}{% endif %}

  # Cooldown period
  - delay:
      minutes: "{{ cooldown_minutes }}"

mode: single
max_exceeded: silent
