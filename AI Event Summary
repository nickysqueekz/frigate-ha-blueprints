blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.6.2.2)
  description: >
    v1.6.2.2 - Stable base. Correct Frigate object filtering, version-stamped debug messages.
    Sends Telegram alerts for camera activity, filters based on Frigate object detection, includes version in all debugging.
  domain: automation
  author: 'valentinfrlch (mod. Stonecam)'
  homeassistant:
    min_version: 2024.10.0

  input:
    telegram_target:
      name: Telegram Chat ID
      description: The chat ID to send notifications to
      selector:
        text: {}
    camera_entities:
      name: Camera Entities
      description: Camera entities to monitor (can select multiple)
      selector:
        entity:
          multiple: true
          domain: camera
    motion_sensors:
      name: Motion Sensors (Optional)
      description: Motion sensors for cameras (same order as cameras). Leave empty if cameras change state directly.
      default: []
      selector:
        entity:
          multiple: true
          domain: binary_sensor
    trigger_state:
      name: Camera Trigger State
      description: State that triggers the automation for cameras
      default: "recording"
      selector:
        text: {}
    cooldown_minutes:
      name: Automation Cooldown (Minutes)
      description: Time to wait before running automation again after completion
      default: 5
      selector:
        number:
          min: 0
          max: 60
          step: 1
    frigate_base_url:
      name: Frigate Base URL
      description: Base URL for Frigate (e.g., http://frigate.local:5000)
      default: "http://frigate.local:5000"
      selector:
        text: {}
    use_object_filter:
      name: Enable Object Filtering
      description: Only send notifications when specific objects are detected (MQTT triggers only)
      default: false
      selector:
        boolean: {}
    required_objects:
      name: Required Objects
      description: Only alert if these objects detected (comma-separated, e.g., person,car)
      default: "person"
      selector:
        text: {}
    blocked_objects:
      name: Blocked Objects
      description: Filter out events if only these objects detected (comma-separated, optional)
      default: ""
      selector:
        text: {}
    debug_object_filtering:
      name: Debug Object Filtering
      description: Send debug messages for object filter (shows detected objects, logic, version)
      default: false
      selector:
        boolean: {}
    debug_full_payload:
      name: Debug Full Payload
      description: Send entire trigger payload for inspection (MQTT only; shows version)
      default: false
      selector:
        boolean: {}

variables:
  version: "1.6.2.2"
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  frigate_base_url: !input frigate_base_url
  use_object_filter: !input use_object_filter
  required_objects: !input required_objects
  blocked_objects: !input blocked_objects
  debug_object_filtering: !input debug_object_filtering
  debug_full_payload: !input debug_full_payload

  required_objects_list: "{{ required_objects.split(',') | map('trim') | list if required_objects else [] }}"
  blocked_objects_list: "{{ blocked_objects.split(',') | map('trim') | list if blocked_objects else [] }}"

  is_frigate_mqtt: "{{ trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined }}"
  camera_entity: >
    {% if motion_sensors and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  camera_name: "{{ camera_entity.replace('camera.', '').replace('_', ' ').title() }}"

  # Detected objects extraction (Frigate MQTT structure)
  detected_objects: >
    {% if is_frigate_mqtt %}
      {% set e = trigger.payload_json.after %}
      {% if e.data is defined and e.data.objects is defined %}
        {{ e.data.objects }}
      {% elif e.objects is defined %}
        {{ e.objects }}
      {% elif e.data is defined and e.data.detections is defined %}
        {{ e.data.detections.keys() | list }}
      {% elif e.detections is defined %}
        {{ e.detections.keys() | list }}
      {% else %}
        []
      {% endif %}
    {% else %}
      []
    {% endif %}

  object_filter_passed: >
    {% if not use_object_filter %}
      {{ true }}
    {% elif not is_frigate_mqtt %}
      {{ true }}
    {% else %}
      {% set objects = detected_objects %}
      {% set req = required_objects_list %}
      {% set blk = blocked_objects_list %}
      {% if req and objects %}
        {% set required_found = objects | select('in', req) | list | length > 0 %}
      {% else %}
        {% set required_found = not req %}
      {% endif %}
      {% if blk and objects %}
        {% set only_blocked = objects | reject('in', blk) | list | length == 0 %}
      {% else %}
        {% set only_blocked = false %}
      {% endif %}
      {{ required_found and not only_blocked }}
    {% endif %}

trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
    id: camera_trigger
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: motion_trigger
  - platform: mqtt
    topic: "frigate/+/events"
    payload: "end"
    id: frigate_mqtt

action:
  # FULL PAYLOAD DEBUGGING
  - if:
      - condition: template
        value_template: "{{ debug_full_payload and is_frigate_mqtt }}"
    then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: |-
            📋 FULL PAYLOAD DEBUG [v{{ version }}]: {{ camera_name }}

            🔍 Trigger Platform: {{ trigger.platform }}
            🆔 Trigger Entity: {{ trigger.entity_id if trigger.entity_id is defined else 'undefined' }}
            📡 MQTT Topic: {{ trigger.topic if trigger.topic is defined else 'undefined' }}

            🔶 Has payload_json: {{ trigger.payload_json is defined }}

            {% if trigger.payload_json is defined and trigger.payload_json.after is defined %}
            📦 AFTER Data:
            {{ trigger.payload_json.after | tojson(indent=2) }}
            {% elif trigger.payload_json is defined %}
            📦 FULL PAYLOAD:
            {{ trigger.payload_json | tojson(indent=2) }}
            {% else %}
            📦 PAYLOAD: not found
            {% endif %}

            🎯 Detected Objects: {{ detected_objects }}
            🎯 Has Frigate Event: {{ is_frigate_mqtt }}

  # OBJECT FILTER DEBUG
  - if:
      - condition: template
        value_template: "{{ debug_object_filtering }}"
    then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: |-
            🔍 OBJECT DEBUG [v{{ version }}]: {{ camera_name }}
            📡 Platform: {{ trigger.platform }}
            🎯 Detected: {{ detected_objects }}
            📝 Required: {{ required_objects_list }}
            🚫 Blocked: {{ blocked_objects_list }}
            ⚡ Filtering enabled: {{ use_object_filter }}
            ✅ Filter passed: {{ object_filter_passed }}

            📊 Filter logic:
            - Required found: {% if required_objects_list %}{{ detected_objects | select('in', required_objects_list) | list }}{% else %}N/A{% endif %}
            - Only blocked: {% if blocked_objects_list %}{{ detected_objects | reject('in', blocked_objects_list) | list | length == 0 }}{% else %}N/A{% endif %}

            {% if not is_frigate_mqtt %}
            ⚠️ Note: Object filtering only works with native Frigate MQTT events! [v{{ version }}]
            {% endif %}

  # MAIN FILTER STOP LOGIC
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ use_object_filter and is_frigate_mqtt and not object_filter_passed }}"
        sequence:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: |
                🔇 [v{{ version }}] {{ camera_name }} - Object filter blocked: {{ detected_objects | join(', ') if detected_objects else 'NONE' }} (Required: {{ required_objects_list | join(', ') }})
          - stop: "Objects do not match filter criteria [v{{ version }}]"

  # NOTIFICATION CODE (unchanged, minimal demo)
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: |
        [v{{ version }}] 🚨 Camera event: {{ camera_name }} ({{ trigger.platform }})
        Detected: {{ detected_objects if detected_objects else 'NONE' }}

mode: single
