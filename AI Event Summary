blueprint:
  name: AI Event Summary (Telegram Bot)
  author: Forked and debugged for HA telegram_bot only
  homeassistant:
    min_version: 2024.10.0
  description: >
    AI-powered summaries for security camera events, strictly using Home Assistant's official telegram_bot integration.
    No legacy notify.* calls; images and text handled per Telegram bot requirements.
  domain: automation
  input:
    run_conditions:
      name: Run Conditions
      description: All conditions must be true for the blueprint to run.
      default: []
      selector:
        condition: {}
    cooldown:
      name: Cooldown
      description: Time to wait before running automation again.
      default:
        minutes: 10
      selector:
        duration: {}
    camera_sensor_section:
      name: Camera & Sensor Settings
      description: Camera and linked motion sensor settings.
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: List of camera entities to monitor.
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain:
                    - camera
              reorder: false
        trigger_state:
          name: Trigger State
          description: Camera state to trigger event.
          default: recording
          selector:
            text:
              multiline: false
              multiple: false
        motion_sensors:
          name: Motion Sensors
          description: Linked binary_sensor motion entities.
          default: []
          selector:
            entity:
              multiple: true
              filter:
                - domain:
                    - binary_sensor
              reorder: false
        duration:
          name: Duration
          description: Seconds to record for analysis.
          default: 5
          selector:
            number:
              min: 1
              max: 60
              step: 1
        max_frames:
          name: Max Frames
          description: Number of frames to analyze.
          default: 3
          selector:
            number:
              min: 1
              max: 60
              step: 1
    ai_section:
      name: AI Settings
      description: AI analysis settings.
      icon: mdi:brain
      collapsed: true
      input:
        remember:
          name: Store in Timeline
          description: Store event data in Timeline for history/queries.
          default: true
          selector:
            boolean: {}
        use_memory:
          name: Use Memory
          description: Use memory context for AI.
          default: false
          selector:
            boolean: {}
        message:
          name: AI Prompt
          description: Prompt to use for AI.
          default: >
            Summarize all moving objects. Ignore static scenery. Use present tense.
            If no movement, reply: 'No activity observed.'
          selector:
            text:
              multiline: true
              multiple: false
        provider:
          name: AI Provider
          description: Vision analysis provider.
          selector:
            config_entry:
              integration: llmvision
        model:
          name: Model
          description: Model to use.
          selector:
            text:
              multiline: false
        target_width:
          name: Target Width
          description: Downscale width.
          default: 1280
          selector:
            number:
              min: 512
              max: 3840
              step: 1
        max_tokens:
          name: Max Tokens
          description: Max tokens for summary.
          default: 20
          selector:
            number:
              min: 1
              max: 300
              step: 1
    notification_section:
      name: Notification Settings
      description: Telegram bot notification settingsâ€”no notify.* calls.
      icon: mdi:telegram
      collapsed: true
      input:
        telegram_config_entry_id:
          name: Telegram Bot Config Entry ID
          description: Config entry ID from Telegram Bot (e.g. 01K5Q0YTVD69JC5CD85573RKSE)
          selector:
            text:
              multiline: false
        telegram_target:
          name: Telegram Target Chat ID(s)
          description: Single ID or list of chat IDs (e.g. 123456789 or [123456789,987654321])
          selector:
            text:
              multiline: false
        condition_notify:
          name: Condition to Notify
          description: Only notify when these conditions are met.
          default: []
          selector:
            condition: {}
        delay_notification:
          name: Notification Cooldown
          description: Seconds delay between notifications.
          default: 60
          selector:
            number:
              min: 0
              max: 86400
              unit_of_measurement: seconds
              mode: box
              step: 1
        file_path:
          name: Snapshot File Path
          description: File path for snapshot image, if using local file.
          default: /media/snapshots/{{ camera_file_path }}/last_motion.jpg
          selector:
            text:
              multiline: false
        tap_navigate:
          name: Tap Navigate (Info only)
          default: /lovelace/0
          selector:
            text:
              multiline: false
    experimental_section:
      name: Experimental features
      description: Do not rely on for production.
      icon: mdi:brain
      collapsed: true
      input:
        important:
          name: Important/AI filter
          description: Only notify for important events.
          default: false
          selector:
            boolean: {}
        additional_actions:
          name: Additional Actions (Experimental)
          description: Advanced/custom actions after analysis and notifications.
          default: []
          selector:
            action: {}

variables:
  telegram_config_entry_id: !input telegram_config_entry_id
  telegram_target: !input telegram_target
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  camera_entity: >
    {% if motion_sensors_list and not trigger.entity_id.startswith('camera.') %}
      {% set index = motion_sensors_list.index(trigger.entity_id) %}
      {{ camera_entities_list[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  tag: "{{ camera_entity + int(as_timestamp(now())) | string }}"
  camera_entity_snapshot: '{{ camera_entities_list[0] }}'
  camera_file_path: '{{ camera_entity_snapshot.replace("camera.", "") }}'
  file_path: !input file_path

max_exceeded: silent
mode: single

trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
    id: camera_trigger
  - platform: state
    entity_id: !input motion_sensors
    to: 'on'
    id: motion_sensor_trigger

condition:
  - condition: and
    conditions: !input run_conditions

action:
  - alias: Analyze camera event with AI
    action: llmvision.stream_analyzer
    data:
      image_entity: '{{ [camera_entity] }}'
      duration: !input duration
      provider: !input provider
      model: !input model
      message: !input message
      use_memory: !input use_memory
      remember: !input remember
      expose_images: true
      generate_title: true
      include_filename: true
      max_frames: !input max_frames
      target_width: !input target_width
      max_tokens: !input max_tokens
    response_variable: response

  - delay:
      seconds: !input delay_notification

  - if:
      - condition: template
        value_template: >
          {{ telegram_config_entry_id | length > 0 and telegram_target | length > 0 }}
    then:
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ response.key_frame is defined and response.key_frame and
                     (response.key_frame.startswith('http') or response.key_frame.startswith('https')) }}
            sequence:
              - service: telegram_bot.send_photo
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                          else [telegram_target | int])
                    }}
                  url: "{{ response.key_frame }}"
                  caption: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html
          - conditions:
              - condition: template
                value_template: >
                  {{ response.key_frame is defined and response.key_frame and
                      response.key_frame.startswith('/') }}
            sequence:
              - service: telegram_bot.send_photo
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                          else [telegram_target | int])
                    }}
                  file: "{{ response.key_frame }}"
                  caption: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html
          - conditions: []
            sequence:
              - service: telegram_bot.send_message
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                          else [telegram_target | int])
                    }}
                  message: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html

  - choose: []
    default: !input additional_actions
