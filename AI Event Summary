blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.7.5.7)
  author: valentinfrlch (modified for Telegram, robust debug, safe states, filtering, fallback)
  homeassistant:
    min_version: 2024.10.0
  description: |
    AI-powered camera event summaries using Frigate's annotated snapshots with object boxes.
    v1.7.5.7: Always full debug dump (if enabled), blocks non-Frigate events after debug, robust error/fallback/notifications, safe for HA 2024.10.
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          default: "12hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
        delay_notification:
          name: Notification Cooldown (Seconds)
          default: 60
          selector:
            number:
              min: 0
              max: 3600
              step: 1
        media_switching:
          name: Enable Media Switching
          default: true
          selector:
            boolean: {}
        show_progress_updates:
          name: Show Progress Updates
          default: true
          selector:
            boolean: {}
    debug_section:
      name: Debug Settings
      icon: mdi:bug-check
      input:
        debug_mode:
          name: Debug Mode (master switch)
          default: false
          selector:
            boolean: {}
    snapshot_section:
      name: Frigate Snapshot Settings
      icon: mdi:camera-enhance
      input:
        use_frigate_snapshots:
          name: Use Frigate Annotated Snapshots
          default: false
          selector:
            boolean: {}
        fallback_to_camera:
          name: Fallback to Camera Snapshots
          default: true
          selector:
            boolean: {}
        include_bounding_boxes:
          name: Include Bounding Boxes
          default: true
          selector:
            boolean: {}
        include_timestamp:
          name: Include Timestamp
          default: false
          selector:
            boolean: {}
        crop_to_objects:
          name: Crop to Objects
          default: false
          selector:
            boolean: {}
        snapshot_height:
          name: Snapshot Height (pixels)
          default: 0
          selector:
            number:
              min: 0
              max: 2160
              step: 60
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Automation Cooldown (Minutes)
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
        frigate_base_url:
          name: Frigate Base URL
          default: "http://frigate.local:5000"
          selector:
            text: {}
        wait_for_frigate:
          name: Wait for Frigate Processing (Seconds)
          default: 8
          selector:
            number:
              min: 1
              max: 30
              step: 1
    ai_section:
      name: Primary AI Settings
      icon: mdi:brain
      input:
        provider:
          name: Primary LLM Provider
          selector:
            config_entry:
              integration: llmvision
        model_list:
          name: Primary Provider Models (Priority Order)
          default: "gemini-2.0-flash;gemini-2.5-pro;gemini-2.0-flash-lite;gemini-2.5-flash;gemini-1.5-flash;gemini-2.5-flash-lite"
          selector:
            text: {}
        ai_prompt:
          name: AI Analysis Prompt
          default: "Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. Be concise."
          selector:
            text:
              multiline: true
        duration:
          name: Analysis Duration (Seconds)
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        use_memory:
          name: Use Memory
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          default: true
          selector:
            boolean: {}
    llm_fallback_section:
      name: LLM Fallback Settings
      icon: mdi:backup-restore-alert
      input:
        enable_secondary_provider:
          name: Enable Secondary Provider Fallback
          default: false
          selector:
            boolean: {}
        secondary_provider:
          name: Secondary LLM Provider
          default: null
          selector:
            config_entry:
              integration: llmvision
        secondary_model_list:
          name: Secondary Provider Models (Priority Order)
          default: "llama-3.2-90b-vision-preview;llama-3.2-11b-vision-preview"
          selector:
            text: {}
        show_model_usage:
          name: Show Which Model Succeeded
          default: true
          selector:
            boolean: {}
    object_section:
      name: Object Detection Settings
      icon: mdi:target
      input:
        use_object_filter:
          name: Enable Object Filtering
          default: false
          selector:
            boolean: {}
        required_objects:
          name: Required Objects
          default: "person,car,truck,bicycle,motorcycle,dog,cat"
          selector:
            text: {}
        blocked_objects:
          name: Blocked Objects
          default: ""
          selector:
            text: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          default: false
          selector:
            boolean: {}
        show_filtered_events:
          name: Show Filtered Events
          default: false
          selector:
            boolean: {}
    fallback_section:
      name: Final Fallback Settings
      icon: mdi:backup-restore
      input:
        enable_final_fallback:
          name: Enable Final Non-LLM Fallback
          default: true
          selector:
            boolean: {}
        fallback_mode:
          name: Final Fallback Mode
          default: "simple_notification"
          selector:
            select:
              options:
                - label: "Simple Notification (Motion detected only)"
                  value: "simple_notification"
                - label: "Time-based Message (Morning=delivery, Evening=visitor, etc.)"
                  value: "time_based"
                - label: "No Notification (Silent failure)"
                  value: "silent"
        show_api_errors:
          name: Show API Error Messages
          default: false
          selector:
            boolean: {}

variables:
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  delay_notification: !input delay_notification
  importance_filtering: !input importance_filtering
  show_filtered_events: !input show_filtered_events
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  ai_prompt: !input ai_prompt
  wait_for_frigate: !input wait_for_frigate
  frigate_base_url: !input frigate_base_url
  use_object_filter: !input use_object_filter
  required_objects: !input required_objects
  blocked_objects: !input blocked_objects
  show_progress_updates: !input show_progress_updates
  media_switching: !input media_switching
  use_frigate_snapshots: !input use_frigate_snapshots
  fallback_to_camera: !input fallback_to_camera
  include_bounding_boxes: !input include_bounding_boxes
  include_timestamp: !input include_timestamp
  crop_to_objects: !input crop_to_objects
  snapshot_height: !input snapshot_height
  model_list: !input model_list
  primary_models: "{{ model_list.split(';') | map('trim') | list }}"
  enable_secondary_provider: !input enable_secondary_provider
  secondary_provider: !input secondary_provider
  secondary_model_list: !input secondary_model_list
  secondary_models: "{{ secondary_model_list.split(';') | map('trim') | list }}"
  show_model_usage: !input show_model_usage
  debug_mode: !input debug_mode
  enable_final_fallback: !input enable_final_fallback
  fallback_mode: !input fallback_mode
  show_api_errors: !input show_api_errors
  is_manual_trigger: "{{ trigger is not defined }}"
  camera_entity: >
    {% if motion_sensors and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  time_suffix: >
    {% if notification_time == "12hour" %}
      {{ " at " + now().strftime("%-I:%M %p") }}
    {% elif notification_time == "24hour" %}
      {{ " at " + now().strftime("%H:%M") }}
    {% else %}
      {{ "" }}
    {% endif %}
  camera_name: '{{ camera_entity.replace("camera.", "").replace("_", " ").title() }}'
  snapshot_path: '/config/www/snapshots/{{ camera_entity.replace("camera.", "") }}_snapshot.jpg'
  required_objects_list: "{{ required_objects.split(',') | map('trim') | list if required_objects else [] }}"
  blocked_objects_list: "{{ blocked_objects.split(',') | map('trim') | list if blocked_objects else [] }}"
  detected_objects: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.data.objects | default([]) }}
    {% else %}
      []
    {% endif %}
  object_filter_passed: >
    {% set objects = detected_objects %}
    {% if not use_object_filter %}
      {{ true }}
    {% else %}
      {% if required_objects_list and objects %}
        {% set required_found = objects | select('in', required_objects_list) | list | length > 0 %}
      {% else %}
        {% set required_found = true %}
      {% endif %}
      {% if blocked_objects_list and objects %}
        {% set only_blocked = objects | reject('in', blocked_objects_list) | list | length == 0 %}
      {% else %}
        {% set only_blocked = false %}
      {% endif %}
      {{ (required_found and not only_blocked) }}
    {% endif %}
  object_filter_debug_msg: >
    {% if debug_mode %}
      {% set objects = detected_objects %}
      {% set required_objects_list = required_objects.split(',') | map('trim') | list if required_objects else [] %}
      {% if use_object_filter and not objects %}
        "DEBUG: Flaw - No objects detected but object filter enabled."
      {% elif use_object_filter and objects and required_objects_list and (objects | select('in', required_objects_list) | list | length == 0) %}
        "DEBUG: Flaw - Required object(s) missing: " ~ required_objects_list|string ~ " detected: " ~ objects|string
      {% else %}
        ""
      {% endif %}
    {% else %}
      ""
    {% endif %}
  media_buttons: >
    {% if not media_switching %}
      []
    {% else %}
      ["📸 Photo:/show_photo_{{ 'manual' if is_manual_trigger else 'event' }}"]
    {% endif %}
  importance_prompt: >
    Classify the security event based on this image. Choose from the following options: "passive", "time-sensitive", or "critical". Respond with one word.
  time_based_message: >
    {% set hour = now().hour %}
    {% if hour >= 6 and hour < 12 %}
      Morning delivery or service visit detected
    {% elif hour >= 12 and hour < 17 %}
      Daytime visitor or delivery detected
    {% elif hour >= 17 and hour < 22 %}
      Evening visitor detected
    {% else %}
      Late night motion detected
    {% endif %}
  is_frigate_event: >
    {{ trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined }}
  trigger_entity: "{{ trigger.entity_id if trigger.entity_id is defined else 'undefined' }}"
  trigger_platform: "{{ trigger.platform if trigger.platform is defined else 'undefined' }}"
  trigger_payload: "{{ trigger.payload_json|tojson if trigger.payload_json is defined else 'undefined' }}"
  detected_objects_debug: "{{ detected_objects|default([]) }}"
  required_objects_debug: "{{ required_objects_list|default([]) }}"
  blocked_objects_debug: "{{ blocked_objects_list|default([]) }}"
  filter_enabled_debug: "{{ use_object_filter }}"
  filter_passed_debug: "{{ object_filter_passed }}"
  required_found_debug: >
    {% if required_objects_list and detected_objects %}
      {{ detected_objects | select('in', required_objects_list) | list }}
    {% else %}
      []
    {% endif %}
  only_blocked_debug: >
    {% if blocked_objects_list and detected_objects %}
      {{ detected_objects | reject('in', blocked_objects_list) | list | length == 0 }}
    {% else %}
      "N/A (no blocks)"
    {% endif %}
  debug_note: >
    {% if not is_frigate_event %}
      "💡 Note: Object filtering only works with MQTT/Frigate events!"
    {% else %}
      ""
    {% endif %}

max_exceeded: silent
mode: single

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger
- platform: event
  event_type: telegram_callback
  id: media_switch

action:

- if:
  - condition: template
    value_template: "{{ debug_mode }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: |
        📋 FULL PAYLOAD DEBUG: {{ camera_name }}

        🔍 Trigger Platform: {{ trigger_platform }}
        🔧 MQTT Trigger Enabled: {{ is_frigate_event }}
        🆔 Trigger Entity: {{ trigger_entity }}
        📡 MQTT Topic: {{ trigger.topic if trigger.topic is defined else 'undefined' }}
        💾 MQTT Payload: {{ trigger_payload }}
        ⏰ Trigger At: {{ now() }}

        🔶 Has payload_json: {{ trigger_payload != "undefined" }}

        📦 PAYLOAD: {% if is_frigate_event %}{{ trigger.payload_json.after | tojson }}{% else %}not found{% endif %}

        🎯 Detected Objects (our extraction): {{ detected_objects_debug }}
        🎯 Has Frigate Event: {{ is_frigate_event }}

        📝 Required objects: {{ required_objects_debug }}
        🚫 Blocked objects: {{ blocked_objects_debug }}
        ⚡ Filter enabled: {{ filter_enabled_debug }}
        ✅ Filter passed: {{ filter_passed_debug }}

        📊 Filter Logic:
        - Required found: {{ required_found_debug }}
        - Only blocked: {{ only_blocked_debug }}

        {{ debug_note }}

- if:
  - condition: template
    value_template: "{{ not is_frigate_event }}"
  then:
  - stop: "Non-Frigate event; no event context for object detection. Automation done after debug."

# Main actions (unchanged from v1.7.5.6)

- choose:
  - conditions:
    - condition: template
      value_template: "{{ trigger.id == 'media_switch' and trigger.event.data.data.startswith('/show_') }}"
    sequence:
    - variables:
        callback_data: "{{ trigger.event.data.data }}"
        callback_event_id: "{{ callback_data.split('_')[-1] }}"
        callback_media_type: "{{ callback_data.split('_')[1] }}"
        callback_message_id: "{{ trigger.event.data.message.message_id | int }}"
        callback_chat_id: "{{ trigger.event.data.chat_id }}"
    - service: telegram_bot.answer_callback_query
      data:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Media switching temporarily disabled - use Frigate web interface"
    - stop: "Media switching completed"

- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "🔧 Manual trigger for {{ camera_name }}{{ time_suffix }}"

- choose:
  - conditions:
    - condition: template
      value_template: "{{ use_object_filter and not object_filter_passed }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Object filter blocked: {{ detected_objects | join(', ') }}"
    - if:
      - condition: template
        value_template: "{{ object_filter_debug_msg }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "{{ object_filter_debug_msg }}"
    - stop: "Objects do not match filter criteria"

- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering }}"
    sequence:
    - service: llmvision.image_analyzer
      data:
        image_entity: ["{{ camera_entity }}"]
        provider: !input provider
        model: "{{ primary_models[0] }}"
        message: "{{ importance_prompt }}"
        include_filename: false
        target_width: !input target_width
        max_tokens: 3
      response_variable: importance
      continue_on_error: true

- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering and importance.response_text|lower == 'passive' }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Filtered (passive) - no alert sent"
    - if:
      - condition: template
        value_template: "{{ debug_mode }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "DEBUG: Importance event flagged as 'passive'."
    - stop: "Event is not important"

- if:
  - condition: template
    value_template: "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > delay_notification }}"
  then:
  - variables:
      initial_message_sent: false
      message_id: 0
      initial_message_failed: false

  - service: camera.snapshot
    target:
      entity_id: "{{ camera_entity }}"
    data:
      filename: "{{ snapshot_path }}"

  - service: telegram_bot.send_photo
    data:
      target: !input telegram_target
      file: "{{ snapshot_path }}"
      caption: "🔍 {{ camera_name }}{{ time_suffix }} - Analyzing..."
      inline_keyboard: "{{ media_buttons if media_switching else [] }}"
    response_variable: initial_message_response
    continue_on_error: true

  - variables:
      initial_message_sent: >
        {{ initial_message_response is defined and
           initial_message_response.chats is defined and
           initial_message_response.chats | length > 0 and
           initial_message_response.chats[0] is defined and
           initial_message_response.chats[0].message_id is defined }}
      initial_message_failed: "{{ not initial_message_sent }}"
      message_id: >
        {{ initial_message_response.chats[0].message_id if initial_message_sent else 0 }}

  - if:
    - condition: template
      value_template: "{{ initial_message_failed }}"
    then:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: "🛑 DEBUG: Could not send snapshot image (empty or missing file). Using text fallback only."

  - if:
    - condition: template
      value_template: "{{ debug_mode }}"
    then:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: |
          🐛 DEBUG: Camera snapshot attempted
          Success: {{ initial_message_sent }}
          Message ID: {{ message_id }}

  - variables:
      analysis_success: false
      successful_model: ""
      analysis_result: ""
      model_attempt: 0

  - repeat:
      while:
        - condition: template
          value_template: "{{ not analysis_success and model_attempt < (primary_models | length) }}"
      sequence:
      - variables:
          current_model: "{{ primary_models[model_attempt] }}"
      - if:
        - condition: template
          value_template: "{{ initial_message_sent and show_progress_updates and model_attempt > 0 and message_id|int > 0 }}"
        then:
        - service: telegram_bot.edit_caption
          data:
            chat_id: "{{ telegram_target | int }}"
            message_id: "{{ message_id }}"
            caption: "🔄 {{ camera_name }}{{ time_suffix }} - Trying {{ current_model }}..."
            inline_keyboard: "{{ media_buttons if media_switching else [] }}"
          continue_on_error: true

      - service: llmvision.stream_analyzer
        data:
          image_entity: ["{{ camera_entity }}"]
          duration: !input duration
          provider: !input provider
          model: "{{ current_model }}"
          message: "{{ ai_prompt }}"
          max_frames: !input max_frames
          target_width: !input target_width
          max_tokens: !input max_tokens
          use_memory: "{{ model_attempt == 0 and use_memory }}"
          remember: "{{ model_attempt == 0 and store_timeline }}"
          generate_title: "{{ model_attempt == 0 and store_timeline }}"
          expose_images: "{{ model_attempt == 0 and store_timeline }}"
          include_filename: true
        response_variable: current_response
        continue_on_error: true

      - variables:
          response_text: "{{ current_response.get('response_text', '') if current_response is defined else '' }}"
          is_valid: >
            {% set text = response_text | lower %}
            {% if text == '' or
                   'couldn\'t generate content' in text or
                   'check logs for details' in text or
                   'api failed' in text or
                   'error:' in text or
                   'overloaded' in text or
                   'the model is overloaded' in text or
                   'provider' in text and 'failed' in text and 'overloaded' in text %}
              false
            {% else %}
              true
            {% endif %}

      - if:
        - condition: template
          value_template: "{{ debug_mode and not is_valid }}"
        then:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "🔍 DEBUG: Model {{ current_model }} failed - {{ response_text[:200] }}"

      - if:
        - condition: template
          value_template: "{{ is_valid }}"
        then:
        - variables:
            analysis_success: true
            successful_model: "{{ current_model }}"
            analysis_result: "{{ response_text }}"
        else:
        - variables:
            model_attempt: "{{ model_attempt + 1 }}"

  # Secondary provider fallback if enabled
  - if:
    - condition: template
      value_template: "{{ not analysis_success and enable_secondary_provider and secondary_provider is not none and secondary_provider != '' }}"
    then:
    - if:
      - condition: template
        value_template: "{{ initial_message_sent and show_progress_updates and message_id|int > 0 }}"
      then:
      - service: telegram_bot.edit_caption
        data:
          chat_id: "{{ telegram_target | int }}"
          message_id: "{{ message_id }}"
          caption: "🆘 {{ camera_name }}{{ time_suffix }} - Trying secondary provider..."
          inline_keyboard: "{{ media_buttons if media_switching else [] }}"
        continue_on_error: true

    - variables:
        secondary_attempt: 0
        secondary_success: false

    - repeat:
        while:
          - condition: template
            value_template: "{{ not secondary_success and secondary_attempt < (secondary_models | length) }}"
        sequence:
        - variables:
            current_secondary_model: "{{ secondary_models[secondary_attempt] }}"

        - if:
          - condition: template
            value_template: "{{ initial_message_sent and show_progress_updates and message_id|int > 0 }}"
          then:
          - service: telegram_bot.edit_caption
            data:
              chat_id: "{{ telegram_target | int }}"
              message_id: "{{ message_id }}"
              caption: "🔄 {{ camera_name }}{{ time_suffix }} - Trying {{ current_secondary_model }}..."
              inline_keyboard: "{{ media_buttons if media_switching else [] }}"
            continue_on_error: true

        - service: llmvision.stream_analyzer
          data:
            image_entity: ["{{ camera_entity }}"]
            duration: !input duration
            provider: !input secondary_provider
            model: "{{ current_secondary_model }}"
            message: "{{ ai_prompt }}"
            max_frames: !input max_frames
            target_width: !input target_width
            max_tokens: !input max_tokens
            use_memory: false
            remember: false
            generate_title: false
            expose_images: false
            include_filename: true
          response_variable: secondary_response
          continue_on_error: true

        - variables:
            secondary_text: "{{ secondary_response.get('response_text', '') if secondary_response is defined else '' }}"
            secondary_valid: >
              {% set text = secondary_text | lower %}
              {% if text == '' or
                     'couldn\'t generate content' in text or
                     'check logs for details' in text or
                     'api failed' in text or
                     'error:' in text or
                     'overloaded' in text or
                     'the model is overloaded' in text or
                     'provider' in text and 'failed' in text and 'overloaded' in text %}
                false
              {% else %}
                true
              {% endif %}
        - if:
          - condition: template
            value_template: "{{ debug_mode and not secondary_valid }}"
          then:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "🔍 DEBUG: Secondary model {{ current_secondary_model }} failed - {{ secondary_text[:200] }}"
        - if:
          - condition: template
            value_template: "{{ secondary_valid }}"
          then:
          - variables:
              analysis_success: true
              secondary_success: true
              successful_model: "{{ current_secondary_model }} (secondary)"
              analysis_result: "{{ secondary_text }}"
          else:
          - variables:
              secondary_attempt: "{{ secondary_attempt + 1 }}"

  # Message result: update caption or send message on success
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ analysis_success and initial_message_sent and message_id|int > 0 }}"
      sequence:
      - service: telegram_bot.edit_caption
        data:
          chat_id: "{{ telegram_target | int }}"
          message_id: "{{ message_id }}"
          caption: >
            {{ analysis_result }}{% if show_model_usage %}

            ({{ successful_model }}){% endif %}
          inline_keyboard: "{{ media_buttons if media_switching else [] }}"
        continue_on_error: true
    - conditions:
      - condition: template
        value_template: "{{ analysis_success and (not initial_message_sent or message_id|int == 0) }}"
      sequence:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: >
            {{ analysis_result }}{% if show_model_usage %} ({{ successful_model }}){% endif %}

    # ALL MODELS FAILED - Update caption/message with fallback or error
    default:
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ initial_message_sent and message_id|int > 0 and enable_final_fallback }}"
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ fallback_mode == 'simple_notification' }}"
            sequence:
            - service: telegram_bot.edit_caption
              data:
                chat_id: "{{ telegram_target | int }}"
                message_id: "{{ message_id }}"
                caption: "{{ camera_name }} motion detected (All AI unavailable)"
                inline_keyboard: "{{ media_buttons if media_switching else [] }}"
              continue_on_error: true
          - conditions:
            - condition: template
              value_template: "{{ fallback_mode == 'time_based' }}"
            sequence:
            - service: telegram_bot.edit_caption
              data:
                chat_id: "{{ telegram_target | int }}"
                message_id: "{{ message_id }}"
                caption: "{{ time_based_message }} (All AI unavailable)"
                inline_keyboard: "{{ media_buttons if media_switching else [] }}"
              continue_on_error: true
          default:
          - service: telegram_bot.edit_caption
            data:
              chat_id: "{{ telegram_target | int }}"
              message_id: "{{ message_id }}"
              caption: "{{ camera_name }}{{ time_suffix }} - Motion detected"
              inline_keyboard: "{{ media_buttons if media_switching else [] }}"
            continue_on_error: true
      - conditions:
        - condition: template
          value_template: "{{ (not initial_message_sent or message_id|int == 0) and enable_final_fallback }}"
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ fallback_mode == 'simple_notification' }}"
            sequence:
            - service: telegram_bot.send_message
              data:
                target: !input telegram_target
                message: "{{ camera_name }} motion detected (All AI unavailable)"
          - conditions:
            - condition: template
              value_template: "{{ fallback_mode == 'time_based' }}"
            sequence:
            - service: telegram_bot.send_message
              data:
                target: !input telegram_target
                message: "{{ time_based_message }} (All AI unavailable)"
          default: []
      default:
      - if:
        - condition: template
          value_template: "{{ initial_message_sent and message_id|int > 0 }}"
        then:
        - service: telegram_bot.edit_caption
          data:
            chat_id: "{{ telegram_target | int }}"
            message_id: "{{ message_id }}"
            caption: "❌ {{ camera_name }}{{ time_suffix }} - All AI analysis failed"
            inline_keyboard: "{{ media_buttons if media_switching else [] }}"
          continue_on_error: true
        else:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "❌ {{ camera_name }}{{ time_suffix }} - All AI analysis failed"

- if:
  - condition: template
    value_template: "{{ not is_manual_trigger and cooldown_minutes > 0 }}"
  then:
  - delay:
      minutes: !input cooldown_minutes
