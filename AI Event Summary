blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.7.5.2)
  author: valentinfrlch (modified for Telegram - v1.7 branch)
  homeassistant:
    min_version: 2024.10.0
  description: >
    AI-powered camera event summaries using Frigate's annotated snapshots with object boxes.
    v1.7.5.1 - Frigate Annotations: Use Frigate's built-in bounding box snapshots instead of plain images.
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          description: The chat ID to send notifications to
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          description: Add time to notification messages
          default: "12hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
        delay_notification:
          name: Notification Cooldown (Seconds)
          description: Time to wait before sending another notification (separate from automation cooldown)
          default: 60
          selector:
            number:
              min: 0
              max: 3600
              step: 1
        media_switching:
          name: Enable Media Switching
          description: Add buttons to switch between photo/GIF/MP4 in the same message
          default: true
          selector:
            boolean: {}
        show_progress_updates:
          name: Show Progress Updates
          description: Update message text to show analysis progress (analyzing → trying model X → final result)
          default: true
          selector:
            boolean: {}
        debug_message_updates:
          name: Debug Message Updates
          description: Send debug info about message_id and update attempts (temporary troubleshooting)
          default: false
          selector:
            boolean: {}
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: Camera entities to monitor (can select multiple)
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          description: Motion sensors for cameras (same order as cameras). Leave empty if cameras change state directly.
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          description: State that triggers the automation for cameras
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Automation Cooldown (Minutes)
          description: Time to wait before running automation again after completion
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
        frigate_base_url:
          name: Frigate Base URL
          description: Base URL for Frigate (e.g., http://frigate.local:5000)
          default: "http://frigate.local:5000"
          selector:
            text: {}
        wait_for_frigate:
          name: Wait for Frigate Processing (Seconds)
          description: Time to wait for Frigate to generate clip/GIF
          default: 8
          selector:
            number:
              min: 1
              max: 30
              step: 1
    snapshot_section:
      name: Snapshot Settings
      icon: mdi:camera-enhance
      input:
        use_frigate_snapshots:
          name: Use Frigate Annotated Snapshots
          description: Use Frigate's pre-generated snapshots with bounding boxes instead of plain camera snapshots
          default: true
          selector:
            boolean: {}
        fallback_to_camera:
          name: Fallback to Camera Snapshots
          description: Use plain camera snapshots if Frigate annotated snapshots fail
          default: true
          selector:
            boolean: {}
        include_bounding_boxes:
          name: Include Bounding Boxes
          description: Add detection bounding boxes to Frigate snapshots (only for Frigate events)
          default: true
          selector:
            boolean: {}
        include_timestamp:
          name: Include Timestamp
          description: Add timestamp overlay to Frigate snapshots
          default: false
          selector:
            boolean: {}
        crop_to_objects:
          name: Crop to Objects  
          description: Crop snapshot to detected objects area (only for Frigate events)
          default: false
          selector:
            boolean: {}
        snapshot_height:
          name: Snapshot Height (pixels)
          description: Resize snapshot height (leave 0 for original size)
          default: 0
          selector:
            number:
              min: 0
              max: 2160
              step: 60
    ai_section:
      name: Primary AI Settings
      icon: mdi:brain
      input:
        provider:
          name: Primary LLM Provider
          description: Primary provider for AI analysis
          selector:
            config_entry:
              integration: llmvision
        model_list:
          name: Primary Provider Models (Priority Order)
          description: "Semicolon-separated list of models to try in order (alternating reliable/premium strategy)"
          default: "gemini-2.0-flash;gemini-2.5-pro;gemini-2.0-flash-lite;gemini-2.5-flash;gemini-1.5-flash;gemini-2.5-flash-lite"
          selector:
            text: {}
        ai_prompt:
          name: AI Analysis Prompt
          description: Prompt sent to AI for analyzing camera footage
          default: "Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. Be concise."
          selector:
            text:
              multiline: true
        duration:
          name: Analysis Duration (Seconds)
          description: How long to record for analysis
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          description: Maximum number of frames to analyze
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          description: Resize images to this width (lower = faster, less detail)
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          description: Maximum length of AI response (higher = more detailed)
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        use_memory:
          name: Use Memory
          description: Use information stored in memory to provide additional context (requires LLMVision memory setup)
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          description: Store events in Home Assistant timeline for review
          default: true
          selector:
            boolean: {}
    llm_fallback_section:
      name: LLM Fallback Settings
      icon: mdi:backup-restore-alert
      input:
        enable_secondary_provider:
          name: Enable Secondary Provider Fallback
          description: Use different provider when all primary models fail
          default: false
          selector:
            boolean: {}
        secondary_provider:
          name: Secondary LLM Provider
          description: Fallback provider when all primary models fail (only required if secondary provider is enabled)
          default: null
          selector:
            config_entry:
              integration: llmvision
        secondary_model_list:
          name: Secondary Provider Models (Priority Order)
          description: "Semicolon-separated list of secondary models to try (e.g., llama-3.2-90b-vision-preview;llama-3.2-11b-vision-preview)"
          default: "llama-3.2-90b-vision-preview;llama-3.2-11b-vision-preview"
          selector:
            text: {}
        show_model_usage:
          name: Show Which Model Succeeded
          description: Include which model was used in the response
          default: true
          selector:
            boolean: {}
    diagnostics_section:
      name: Diagnostic Settings
      icon: mdi:bug-check
      input:
        enable_diagnostics:
          name: Enable All Diagnostics
          description: Master switch for all diagnostic messages (turn OFF for clean production use)
          default: false
          selector:
            boolean: {}
        detailed_error_logging:
          name: Enable Detailed Error Logging
          description: Send comprehensive error details to Telegram for each model attempt (only if diagnostics enabled)
          default: true
          selector:
            boolean: {}
    object_section:
      name: Object Detection Settings
      icon: mdi:target
      input:
        use_object_filter:
          name: Enable Object Filtering
          description: Only send notifications when specific objects are detected
          default: false
          selector:
            boolean: {}
        required_objects:
          name: Required Objects
          description: Only send alerts when these objects are detected (comma-separated list). Leave empty to disable.
          default: "person,car,truck,bicycle,motorcycle,dog,cat"
          selector:
            text: {}
        blocked_objects:
          name: Blocked Objects  
          description: Never send alerts when only these objects are detected (comma-separated list). Leave empty to disable.
          default: ""
          selector:
            text: {}
    frigate_enhanced_section:
      name: Frigate v0.16 Enhanced Features
      icon: mdi:face-recognition
      input:
        use_frigate_enhanced:
          name: Enable Frigate Enhanced Features
          description: Use Frigate v0.16+ enhanced analysis in AI prompts
          default: false
          selector:
            boolean: {}
        use_face_recognition:
          name: Enable Face Recognition Data
          description: Use Frigate's face recognition results in AI analysis
          default: true
          selector:
            boolean: {}
        include_confidence_scores:
          name: Include Confidence Scores
          description: Add object detection confidence scores to AI context
          default: true
          selector:
            boolean: {}
        use_zone_context:
          name: Enable Zone Context
          description: Include zone information in AI analysis
          default: true
          selector:
            boolean: {}
        face_confidence_threshold:
          name: Face Recognition Confidence Threshold
          description: Minimum confidence to include face names (0-100)
          default: 75
          selector:
            number:
              min: 0
              max: 100
              step: 5
    fallback_section:
      name: Final Fallback Settings
      icon: mdi:backup-restore
      input:
        enable_final_fallback:
          name: Enable Final Non-LLM Fallback
          description: Use basic fallback when all LLMs fail
          default: true
          selector:
            boolean: {}
        fallback_mode:
          name: Final Fallback Mode
          description: What to do when all AI analysis fails
          default: "simple_notification"
          selector:
            select:
              options:
                - label: "Simple Notification (Motion detected only)"
                  value: "simple_notification"
                - label: "Time-based Message (Morning=delivery, Evening=visitor, etc.)"
                  value: "time_based"
                - label: "No Notification (Silent failure)"
                  value: "silent"
        show_api_errors:
          name: Show API Error Messages
          description: Send error details to Telegram when AI fails (for debugging)
          default: false
          selector:
            boolean: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          description: Use AI to filter out unimportant events
          default: false
          selector:
            boolean: {}
        show_filtered_events:
          name: Show Filtered Events
          description: Send a brief message when events are filtered out
          default: false
          selector:
            boolean: {}

variables:
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  delay_notification: !input delay_notification
  importance_filtering: !input importance_filtering
  show_filtered_events: !input show_filtered_events
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  enable_final_fallback: !input enable_final_fallback
  fallback_mode: !input fallback_mode
  show_api_errors: !input show_api_errors
  ai_prompt: !input ai_prompt
  wait_for_frigate: !input wait_for_frigate
  frigate_base_url: !input frigate_base_url
  use_object_filter: !input use_object_filter
  required_objects: !input required_objects
  blocked_objects: !input blocked_objects
  show_progress_updates: !input show_progress_updates
  debug_message_updates: !input debug_message_updates
  media_switching: !input media_switching
  
  # NEW: Frigate snapshot settings
  use_frigate_snapshots: !input use_frigate_snapshots
  fallback_to_camera: !input fallback_to_camera
  include_bounding_boxes: !input include_bounding_boxes
  include_timestamp: !input include_timestamp
  crop_to_objects: !input crop_to_objects
  snapshot_height: !input snapshot_height
  
  # Multi-model fallback variables
  model_list: !input model_list
  primary_models: "{{ model_list.split(';') | map('trim') | list }}"
  enable_secondary_provider: !input enable_secondary_provider
  secondary_provider: !input secondary_provider
  secondary_model_list: !input secondary_model_list
  secondary_models: "{{ secondary_model_list.split(';') | map('trim') | list }}"
  show_model_usage: !input show_model_usage
  
  # Diagnostic variables
  enable_diagnostics: !input enable_diagnostics
  detailed_error_logging: !input detailed_error_logging
  
  # Enhanced Frigate data variables
  use_frigate_enhanced: !input use_frigate_enhanced
  use_face_recognition: !input use_face_recognition
  include_confidence_scores: !input include_confidence_scores
  use_zone_context: !input use_zone_context
  face_confidence_threshold: !input face_confidence_threshold
  
  is_manual_trigger: "{{ trigger is not defined }}"
  
  # Camera entity detection (matches reference blueprint)
  camera_entity: >
    {% if motion_sensors and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  
  # Time formatting
  time_suffix: >
    {% if notification_time == "12hour" %}
      {{ " at " + now().strftime("%-I:%M %p") }}
    {% elif notification_time == "24hour" %}
      {{ " at " + now().strftime("%H:%M") }}
    {% else %}
      {{ "" }}
    {% endif %}
  
  camera_name: '{{ camera_entity.replace("camera.", "").replace("_", " ").title() }}'
  frigate_camera_name: '{{ camera_entity.replace("camera.", "") }}'
  
  # Standard camera snapshot path (fallback)
  snapshot_path: '/config/www/snapshots/{{ frigate_camera_name }}_snapshot.jpg'
  
  # Extract enhanced Frigate event data - SAFE VERSION
  frigate_event_data: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after }}
    {% else %}
      {}
    {% endif %}
  
  # Event ID detection (improved logic)
  event_id: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.id }}
    {% else %}
      {{ now().strftime('%Y%m%d_%H%M%S') }}_manual
    {% endif %}
  
  # Object filtering logic (matches reference blueprint pattern)
  required_objects_list: "{{ required_objects.split(',') | map('trim') | list if required_objects else [] }}"
  blocked_objects_list: "{{ blocked_objects.split(',') | map('trim') | list if blocked_objects else [] }}"
  
  # Determine if this is a real Frigate event
  has_real_frigate_event: >
    {{ trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined }}
  
  # Get detected objects from trigger (if available)
  detected_objects: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.data.objects | default([]) }}
    {% else %}
      []
    {% endif %}
  
  # NEW: Build Frigate snapshot URL with parameters
  frigate_snapshot_params: >
    {% set params = [] %}
    {% if include_bounding_boxes and has_real_frigate_event %}
      {% set params = params + ['bbox=1'] %}
    {% endif %}
    {% if include_timestamp %}
      {% set params = params + ['timestamp=1'] %}
    {% endif %}
    {% if crop_to_objects and has_real_frigate_event %}
      {% set params = params + ['crop=1'] %}
    {% endif %}
    {% if snapshot_height > 0 %}
      {% set params = params + ['h=' + snapshot_height|string] %}
    {% endif %}
    {{ '?' + params|join('&') if params else '' }}
  
  # NEW: Frigate annotated snapshot URLs
  frigate_event_snapshot_url: >
    {% if has_real_frigate_event %}
      {{ frigate_base_url }}/api/events/{{ event_id }}/snapshot.jpg{{ frigate_snapshot_params }}
    {% else %}
      {{ frigate_base_url }}/api/{{ frigate_camera_name }}/latest.jpg{{ frigate_snapshot_params }}
    {% endif %}
  
  # Local file path for downloaded Frigate snapshot
  frigate_snapshot_path: '/config/www/snapshots/{{ frigate_camera_name }}_frigate_{{ event_id }}.jpg'
  
  # FIXED: Safe Frigate context generation - only if enabled and data exists
  frigate_context: >
    {% if use_frigate_enhanced and has_real_frigate_event %}
      {% set context_parts = [] %}
      
      {# Basic object detection #}
      {% if detected_objects %}
        {% set context_parts = context_parts + ["Objects: " + detected_objects | join(", ")] %}
      {% endif %}
      
      {# Only add if context exists #}
      {% if context_parts %}
        {{ "Frigate detected " + context_parts | join("; ") + "." }}
      {% else %}
        {{ "" }}
      {% endif %}
    {% else %}
      {{ "" }}
    {% endif %}
  
  # Enhanced AI prompt - safer version
  enhanced_ai_prompt: >
    {% if frigate_context and frigate_context != "" %}
      {{ frigate_context }} {{ ai_prompt }}
    {% else %}
      {{ ai_prompt }}
    {% endif %}
  
  # Object filter check
  object_filter_passed: >
    {% if not use_object_filter %}
      {{ true }}
    {% else %}
      {% set objects = detected_objects %}
      {% if required_objects_list and objects %}
        {% set required_found = objects | select('in', required_objects_list) | list | length > 0 %}
      {% else %}
        {% set required_found = true %}
      {% endif %}
      {% if blocked_objects_list and objects %}
        {% set only_blocked = objects | reject('in', blocked_objects_list) | list | length == 0 %}
      {% else %}
        {% set only_blocked = false %}
      {% endif %}
      {{ required_found and not only_blocked }}
    {% endif %}
  
  # Frigate media URLs
  frigate_clip_url: "{{ frigate_base_url }}/api/events/{{ event_id }}/clip.mp4"
  frigate_gif_url: "{{ frigate_base_url }}/api/events/{{ event_id }}/preview.gif"
  
  # Local file paths for downloaded media
  clip_path: '/config/www/snapshots/{{ frigate_camera_name }}_{{ event_id }}.mp4'
  gif_path: '/config/www/snapshots/{{ frigate_camera_name }}_{{ event_id }}.gif'
  
  # FIXED: Dynamic inline keyboard based on available media (moved from inline_keyboard_buttons to be properly defined)
  media_buttons: >
    {% if not media_switching %}
      []
    {% elif has_real_frigate_event %}
      ["📸 Photo:/show_photo_{{ event_id }}, 📹 GIF:/show_gif_{{ event_id }}, 🎬 MP4:/show_mp4_{{ event_id }}"]
    {% else %}
      ["📸 Photo:/show_photo_{{ event_id }}"]
    {% endif %}
  
  # Fallback message based on time of day
  time_based_message: >
    {% set hour = now().hour %}
    {% if hour >= 6 and hour < 12 %}
      Morning delivery or service visit detected
    {% elif hour >= 12 and hour < 17 %}
      Daytime visitor or delivery detected
    {% elif hour >= 17 and hour < 22 %}
      Evening visitor detected
    {% else %}
      Late night motion detected
    {% endif %}
  
  # Importance prompt (matches reference blueprint style)
  importance_prompt: >
    Classify the security event based on this image. Choose from the following options: "passive" for unimportant events, "time-sensitive" for notable but non-critical events such as a person at the front door, and "critical" only for potential burglaries or highly suspicious activity. Respond with one of these options exactly, without additional explanation.

max_exceeded: silent
mode: single

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state  
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger
# Listen for inline keyboard button presses
- platform: event
  event_type: telegram_callback
  id: media_switch

action:
# Handle media switching button presses
- choose:
  - conditions:
    - condition: template
      value_template: "{{ trigger.id == 'media_switch' and trigger.event.data.data.startswith('/show_') }}"
    sequence:
    - variables:
        callback_data: "{{ trigger.event.data.data }}"
        callback_event_id: "{{ callback_data.split('_')[-1] }}"
        callback_media_type: "{{ callback_data.split('_')[1] }}"
        callback_message_id: "{{ trigger.event.data.message.message_id }}"
        callback_chat_id: "{{ trigger.event.data.chat_id }}"
    
    # Acknowledge the button press
    - service: telegram_bot.answer_callback_query
      data:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Switching to {{ callback_media_type }}..."
    
    # Wait for Frigate processing if switching to GIF/MP4
    - if:
      - condition: template
        value_template: "{{ callback_media_type in ['gif', 'mp4'] }}"
      then:
      - delay:
          seconds: !input wait_for_frigate
    
    # Switch media based on button pressed
    - choose:
      # Switch to Photo (with or without bounding boxes based on settings)
      - conditions:
        - condition: template
          value_template: "{{ callback_media_type == 'photo' }}"
        sequence:
        # Try Frigate annotated snapshot first
        - if:
          - condition: template
            value_template: "{{ use_frigate_snapshots }}"
          then:
          # Build URL for this specific event
          - variables:
              switch_frigate_url: >
                {% if callback_event_id != 'manual' %}
                  {{ frigate_base_url }}/api/events/{{ callback_event_id }}/snapshot.jpg{{ frigate_snapshot_params }}
                {% else %}
                  {{ frigate_base_url }}/api/{{ frigate_camera_name }}/latest.jpg{{ frigate_snapshot_params }}
                {% endif %}
              switch_frigate_path: '/config/www/snapshots/{{ frigate_camera_name }}_switch_frigate.jpg'
          
          - service: downloader.download_file
            data:
              url: "{{ switch_frigate_url }}"
              filename: "{{ switch_frigate_path }}"
            continue_on_error: true
          
          - delay:
              seconds: 1
          
          # Check if Frigate snapshot download succeeded
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ states('sensor.file_exists') == 'on' }}"
              sequence:
              - service: telegram_bot.edit_media
                data:
                  chat_id: "{{ callback_chat_id }}"
                  message_id: "{{ callback_message_id }}"
                  media:
                    type: photo
                    media: "{{ switch_frigate_path }}"
                  inline_keyboard: "{{ media_buttons }}"
                continue_on_error: true
            # Fallback to camera snapshot if enabled
            default:
            - if:
              - condition: template
                value_template: "{{ fallback_to_camera }}"
              then:
              - variables:
                  switch_camera_entity: "{{ camera_entities[0] }}"
                  switch_snapshot_path: '/config/www/snapshots/{{ frigate_camera_name }}_switch_camera.jpg'
              
              - service: camera.snapshot
                target:
                  entity_id: "{{ switch_camera_entity }}"
                data:
                  filename: "{{ switch_snapshot_path }}"
              
              - service: telegram_bot.edit_media
                data:
                  chat_id: "{{ callback_chat_id }}"
                  message_id: "{{ callback_message_id }}"
                  media:
                    type: photo
                    media: "{{ switch_snapshot_path }}"
                  inline_keyboard: "{{ media_buttons }}"
                continue_on_error: true
          else:
          # Use camera snapshot directly
          - variables:
              switch_camera_entity: "{{ camera_entities[0] }}"
              switch_snapshot_path: '/config/www/snapshots/{{ frigate_camera_name }}_switch_camera.jpg'
          
          - service: camera.snapshot
            target:
              entity_id: "{{ switch_camera_entity }}"
            data:
              filename: "{{ switch_snapshot_path }}"
          
          - service: telegram_bot.edit_media
            data:
              chat_id: "{{ callback_chat_id }}"
              message_id: "{{ callback_message_id }}"
              media:
                type: photo
                media: "{{ switch_snapshot_path }}"
              inline_keyboard: "{{ media_buttons }}"
            continue_on_error: true
      
      # Switch to GIF
      - conditions:
        - condition: template
          value_template: "{{ callback_media_type == 'gif' }}"
        sequence:
        - variables:
            switch_frigate_gif_url: "{{ frigate_base_url }}/api/events/{{ callback_event_id }}/preview.gif"
            switch_gif_path: '/config/www/snapshots/{{ callback_event_id }}_switch.gif'
        
        - service: downloader.download_file
          data:
            url: "{{ switch_frigate_gif_url }}"
            filename: "{{ switch_gif_path }}"
          continue_on_error: true
        
        - delay:
            seconds: 2
        
        - service: telegram_bot.edit_media
          data:
            chat_id: "{{ callback_chat_id }}"
            message_id: "{{ callback_message_id }}"
            media:
              type: animation
              media: "{{ switch_gif_path }}"
            inline_keyboard: "{{ media_buttons }}"
          continue_on_error: true
      
      # Switch to MP4
      - conditions:
        - condition: template
          value_template: "{{ callback_media_type == 'mp4' }}"
        sequence:
        - variables:
            switch_frigate_mp4_url: "{{ frigate_base_url }}/api/events/{{ callback_event_id }}/clip.mp4"
            switch_mp4_path: '/config/www/snapshots/{{ callback_event_id }}_switch.mp4'
        
        - service: downloader.download_file
          data:
            url: "{{ switch_frigate_mp4_url }}"
            filename: "{{ switch_mp4_path }}"
          continue_on_error: true
        
        - delay:
            seconds: 2
        
        - service: telegram_bot.edit_media
          data:
            chat_id: "{{ callback_chat_id }}"
            message_id: "{{ callback_message_id }}"
            media:
              type: video
              media: "{{ switch_mp4_path }}"
            inline_keyboard: "{{ media_buttons }}"
          continue_on_error: true
    
    - stop: "Media switching completed"

# Manual trigger notification
- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "🔧 Manual trigger for {{ camera_name }}{{ time_suffix }}"

# Object filtering check (matches reference blueprint logic)
- choose:
  - conditions:
    - condition: template
      value_template: "{{ use_object_filter and not object_filter_passed }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Object filter blocked: {{ detected_objects | join(', ') }}"
    - stop: "Objects do not match filter criteria"

# Importance filtering (matches reference blueprint flow)
- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering }}"
    sequence:
    - service: llmvision.image_analyzer
      data:
        image_entity: ["{{ camera_entity }}"]
        provider: !input provider
        model: "{{ primary_models[0] }}"
        message: "{{ importance_prompt }}"
        include_filename: false
        target_width: !input target_width
        max_tokens: 3
      response_variable: importance
      continue_on_error: true

# Stop if event is passive (matches reference blueprint)
- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering and importance.response_text|lower == 'passive' }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Filtered (passive) - no alert sent"
    - stop: "Event is not important"

# Notification cooldown check
- if:
  - condition: template
    value_template: "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > delay_notification }}"
  then:
  
  # NEW: Try Frigate annotated snapshot first, fallback to camera snapshot
  - variables:
      initial_message_sent: false
      message_id: 0
      snapshot_success: false
  
  # Try Frigate annotated snapshot first (if enabled)
  - if:
    - condition: template
      value_template: "{{ use_frigate_snapshots }}"
    then:
    - service: downloader.download_file
      data:
        url: "{{ frigate_event_snapshot_url }}"
        filename: "{{ frigate_snapshot_path }}"
      continue_on_error: true
    
    - delay:
        seconds: 1
    
    # Check if Frigate snapshot download succeeded
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ states('sensor.file_exists') == 'on' }}"
        sequence:
        # Send Frigate annotated snapshot
        - service: telegram_bot.send_photo
          data:
            target: !input telegram_target
            file: "{{ frigate_snapshot_path }}"
            caption: "🔍 {{ camera_name }}{{ time_suffix }} - Analyzing..."
            inline_keyboard: "{{ media_buttons if media_switching else [] }}"
          response_variable: initial_message_response
        
        - variables:
            snapshot_success: true
            initial_message_sent: "{{ initial_message_response is defined and initial_message_response.chats is defined and initial_message_response.chats | length > 0 }}"
            message_id: "{{ initial_message_response.chats[0].message_id | int if initial_message_response is defined and initial_message_response.chats is defined and initial_message_response.chats | length > 0 else 0 }}"
      
      # Frigate snapshot failed - try camera fallback if enabled
      default:
      - if:
        - condition: template
          value_template: "{{ fallback_to_camera }}"
        then:
        - service: camera.snapshot
          target:
            entity_id: "{{ camera_entity }}"
          data:
            filename: "{{ snapshot_path }}"
        
        - service: telegram_bot.send_photo
          data:
            target: !input telegram_target
            file: "{{ snapshot_path }}"
            caption: "🔍 {{ camera_name }}{{ time_suffix }} - Analyzing... (Camera fallback)"
            inline_keyboard: "{{ media_buttons if media_switching else [] }}"
          response_variable: initial_message_response
        
        - variables:
            snapshot_success: true
            initial_message_sent: "{{ initial_message_response is defined and initial_message_response.chats is defined and initial_message_response.chats | length > 0 }}"
            message_id: "{{ initial_message_response.chats[0].message_id | int if initial_message_response is defined and initial_
