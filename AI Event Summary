blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.7.5.11)
  author: valentinfrlch (debug gated to Frigate events only)
  homeassistant:
    min_version: 2024.10.0
  description: |
    AI-powered camera event summaries with Frigate annotated snapshots.
    v1.7.5.11: FULL PAYLOAD DEBUG only on real Frigate/MQTT events; state triggers are ignored entirely.
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          default: "12hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
        delay_notification:
          name: Notification Cooldown (Seconds)
          default: 60
          selector:
            number:
              min: 0
              max: 3600
              step: 1
        media_switching:
          name: Enable Media Switching
          default: true
          selector:
            boolean: {}
        show_progress_updates:
          name: Show Progress Updates
          default: true
          selector:
            boolean: {}
    debug_section:
      name: Debug Settings
      icon: mdi:bug-check
      input:
        debug_mode:
          name: Debug Mode (master switch)
          default: false
          selector:
            boolean: {}
    snapshot_section:
      name: Frigate Snapshot Settings
      icon: mdi:camera-enhance
      input:
        use_frigate_snapshots:
          name: Use Frigate Annotated Snapshots
          default: false
          selector:
            boolean: {}
        fallback_to_camera:
          name: Fallback to Camera Snapshots
          default: true
          selector:
            boolean: {}
        include_bounding_boxes:
          name: Include Bounding Boxes
          default: true
          selector:
            boolean: {}
        include_timestamp:
          name: Include Timestamp
          default: false
          selector:
            boolean: {}
        crop_to_objects:
          name: Crop to Objects
          default: false
          selector:
            boolean: {}
        snapshot_height:
          name: Snapshot Height (pixels)
          default: 0
          selector:
            number:
              min: 0
              max: 2160
              step: 60
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Automation Cooldown (Minutes)
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
        frigate_base_url:
          name: Frigate Base URL
          default: "http://frigate.local:5000"
          selector:
            text: {}
        wait_for_frigate:
          name: Wait for Frigate Processing (Seconds)
          default: 8
          selector:
            number:
              min: 1
              max: 30
              step: 1
    ai_section:
      name: Primary AI Settings
      icon: mdi:brain
      input:
        provider:
          name: Primary LLM Provider
          selector:
            config_entry:
              integration: llmvision
        model_list:
          name: Primary Provider Models (Priority Order)
          default: "gemini-2.0-flash;gemini-2.5-pro;gemini-2.0-flash-lite;gemini-2.5-flash;gemini-1.5-flash;gemini-2.5-flash-lite"
          selector:
            text: {}
        ai_prompt:
          name: AI Analysis Prompt
          default: "Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. Be concise."
          selector:
            text:
              multiline: true
        duration:
          name: Analysis Duration (Seconds)
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        use_memory:
          name: Use Memory
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          default: true
          selector:
            boolean: {}
    llm_fallback_section:
      name: LLM Fallback Settings
      icon: mdi:backup-restore-alert
      input:
        enable_secondary_provider:
          name: Enable Secondary Provider Fallback
          default: false
          selector:
            boolean: {}
        secondary_provider:
          name: Secondary LLM Provider
          default: null
          selector:
            config_entry:
              integration: llmvision
        secondary_model_list:
          name: Secondary Provider Models (Priority Order)
          default: "llama-3.2-90b-vision-preview;llama-3.2-11b-vision-preview"
          selector:
            text: {}
        show_model_usage:
          name: Show Which Model Succeeded
          default: true
          selector:
            boolean: {}
    object_section:
      name: Object Detection Settings
      icon: mdi:target
      input:
        use_object_filter:
          name: Enable Object Filtering
          default: false
          selector:
            boolean: {}
        required_objects:
          name: Required Objects
          default: "person,car,truck,bicycle,motorcycle,dog,cat"
          selector:
            text: {}
        blocked_objects:
          name: Blocked Objects
          default: ""
          selector:
            text: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          default: false
          selector:
            boolean: {}
        show_filtered_events:
          name: Show Filtered Events
          default: false
          selector:
            boolean: {}
    fallback_section:
      name: Final Fallback Settings
      icon: mdi:backup-restore
      input:
        enable_final_fallback:
          name: Enable Final Non-LLM Fallback
          default: true
          selector:
            boolean: {}
        fallback_mode:
          name: Final Fallback Mode
          default: "simple_notification"
          selector:
            select:
              options:
                - label: "Simple Notification (Motion detected only)"
                  value: "simple_notification"
                - label: "Time-based Message (Morning=delivery, Evening=visitor, etc.)"
                  value: "time_based"
                - label: "No Notification (Silent failure)"
                  value: "silent"
        show_api_errors:
          name: Show API Error Messages
          default: false
          selector:
            boolean: {}

variables:
  blueprint_version: "1.7.5.11"
  debug_timestamp: "{{ now().isoformat() }}"
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  delay_notification: !input delay_notification
  importance_filtering: !input importance_filtering
  show_filtered_events: !input show_filtered_events
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  ai_prompt: !input ai_prompt
  wait_for_frigate: !input wait_for_frigate
  frigate_base_url: !input frigate_base_url
  use_object_filter: !input use_object_filter
  required_objects: !input required_objects
  blocked_objects: !input blocked_objects
  show_progress_updates: !input show_progress_updates
  media_switching: !input media_switching
  use_frigate_snapshots: !input use_frigate_snapshots
  fallback_to_camera: !input fallback_to_camera
  include_bounding_boxes: !input include_bounding_boxes
  include_timestamp: !input include_timestamp
  crop_to_objects: !input crop_to_objects
  snapshot_height: !input snapshot_height
  model_list: !input model_list
  primary_models: "{{ model_list.split(';') | map('trim') | list }}"
  enable_secondary_provider: !input enable_secondary_provider
  secondary_provider: !input secondary_provider
  secondary_model_list: !input secondary_model_list
  secondary_models: "{{ secondary_model_list.split(';') | map('trim') | list }}"
  show_model_usage: !input show_model_usage
  debug_mode: !input debug_mode
  enable_final_fallback: !input enable_final_fallback
  fallback_mode: !input fallback_mode
  show_api_errors: !input show_api_errors
  is_manual_trigger: "{{ trigger is not defined }}"
  is_frigate_event: >
    {{ trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined }}
  camera_entity: >
    {% if motion_sensors and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  time_suffix: >
    {% if notification_time == "12hour" %}
      {{ " at " + now().strftime("%-I:%M %p") }}
    {% elif notification_time == "24hour" %}
      {{ " at " + now().strftime("%H:%M") }}
    {% else %}
      {{ "" }}
    {% endif %}
  camera_name: '{{ camera_entity.replace("camera.", "").replace("_", " ").title() }}'
  snapshot_path: '/config/www/snapshots/{{ camera_entity.replace("camera.", "") }}_snapshot.jpg'
  required_objects_list: "{{ required_objects.split(',') | map('trim') | list if required_objects else [] }}"
  blocked_objects_list: "{{ blocked_objects.split(',') | map('trim') | list if blocked_objects else [] }}"
  detected_objects: >
    {% if is_frigate_event %}
      {{ trigger.payload_json.after.data.objects | default([]) }}
    {% else %}
      []
    {% endif %}
  object_filter_passed: >
    {% set objects = detected_objects %}
    {% if not use_object_filter %}
      true
    {% else %}
      {% if required_objects_list %}
        {% set required_found = objects | select('in', required_objects_list) | list | length > 0 %}
      {% else %}
        {% set required_found = true %}
      {% endif %}
      {% if blocked_objects_list and objects %}
        {% set only_blocked = objects | reject('in', blocked_objects_list) | list | length == 0 %}
      {% else %}
        {% set only_blocked = false %}
      {% endif %}
      {{ required_found and not only_blocked }}
    {% endif %}
  required_found_debug: >
    {% if required_objects_list %}
      {{ detected_objects | select('in', required_objects_list) | list }}
    {% else %}
      "none required"
    {% endif %}
  only_blocked_debug: >
    {% if blocked_objects_list %}
      {{ detected_objects | reject('in', blocked_objects_list) | list }}
    {% else %}
      "none blocked"
    {% endif %}
  object_filter_debug_msg: >
    {% if debug_mode and use_object_filter and not object_filter_passed %}
      "DEBUG: Filtering failed—required_objects: {{ required_objects_list }}, detected: {{ detected_objects }}"
    {% else %}
      ""
    {% endif %}
  media_buttons: >
    {% if media_switching %}
      ["📸 Photo:/show_photo_{{ 'manual' if is_manual_trigger else 'event' }}"]
    {% else %}
      []
    {% endif %}
  importance_prompt: >
    Classify the security event based on this image. Choose from the following options: "passive", "time-sensitive", or "critical". Respond with one word.
  time_based_message: >
    {% set hour = now().hour %}
    {% if hour >= 6 and hour < 12 %}
      Morning delivery or service visit detected
    {% elif hour >= 12 and hour < 17 %}
      Daytime visitor or delivery detected
    {% elif hour >= 17 and hour < 22 %}
      Evening visitor detected
    {% else %}
      Late night motion detected
    {% endif %}

max_exceeded: silent
mode: single

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger
- platform: event
  event_type: telegram_callback
  id: media_switch

action:

# 1) FULL PAYLOAD DEBUG only if a real Frigate event and debug_mode
- if:
  - condition: template
    value_template: "{{ debug_mode and is_frigate_event }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: |
        📋 FULL PAYLOAD DEBUG v{{ blueprint_version }} @ {{ debug_timestamp }}

        🔍 Trigger Platform: {{ trigger.platform }}
        🆔 Trigger Entity: {{ trigger.entity_id }}
        ⏰ Trigger At: {{ now() }}
        🔶 Has payload_json: {{ is_frigate_event }}
        🎯 Detected Objects: {{ detected_objects }}
        📝 Required: {{ required_objects_list }}
        🚫 Blocked: {{ blocked_objects_list }}
        ⚡ Filter on: {{ use_object_filter }}
        ✅ Filter passed: {{ object_filter_passed }}
        📊 Logic: required_found={{ required_found_debug }}, only_blocked={{ only_blocked_debug }}

# 2) STOP on non-Frigate event (no notifications, no debug)
- if:
  - condition: template
    value_template: "{{ not is_frigate_event }}"
  then:
  - stop: "No Frigate event; automation ends."

# 3) Media switch handling
- choose:
  - conditions:
      - condition: template
        value_template: "{{ trigger.id == 'media_switch' and trigger.event.data.data.startswith('/show_') }}"
    sequence:
      - service: telegram_bot.answer_callback_query
        data:
          callback_query_id: "{{ trigger.event.data.id }}"
          message: "Media switching disabled—use Frigate interface"
      - stop: "Media switch complete"

# 4) Manual trigger message
- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "🔧 Manual trigger for {{ camera_name }}{{ time_suffix }}"

# 5) Object filtering
- choose:
  - conditions:
      - condition: template
        value_template: "{{ use_object_filter and not object_filter_passed }}"
    sequence:
      - if:
          - condition: template
            value_template: "{{ show_filtered_events }}"
        then:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "🔇 {{ camera_name }}{{ time_suffix }} - Object filter blocked: {{ detected_objects | join(', ') }}"
      - if:
          - condition: template
            value_template: "{{ object_filter_debug_msg }}"
        then:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "{{ object_filter_debug_msg }}"
      - stop: "Filtered out"

# 6) Importance filtering (unchanged)
- choose:
  - conditions:
      - condition: template
        value_template: "{{ importance_filtering }}"
    sequence:
      - service: llmvision.image_analyzer
        data:
          image_entity: ["{{ camera_entity }}"]
          provider: !input provider
          model: "{{ primary_models[0] }}"
          message: "{{ importance_prompt }}"
          include_filename: false
          target_width: !input target_width
          max_tokens: 3
        response_variable: importance
        continue_on_error: true

- choose:
  - conditions:
      - condition: template
        value_template: "{{ importance_filtering and importance.response_text|lower == 'passive' }}"
    sequence:
      - if:
          - condition: template
            value_template: "{{ show_filtered_events }}"
        then:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "🔇 {{ camera_name }}{{ time_suffix }} - Filtered (passive)"
      - if:
          - condition: template
            value_template: "{{ debug_mode }}"
        then:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "DEBUG: Importance event flagged as 'passive'."
      - stop: "Passive event"

# 7) Cooldown & Snapshot + AI analysis + Fallback (identical to v1.7.5.10)
# ... entire remaining logic from v1.7.5.10 goes here unmodified ...
