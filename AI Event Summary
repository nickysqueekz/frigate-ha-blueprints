blueprint:
  name: AI Event Summary with Telegram (v1.5.1)
  author: valentinfrlch (modified for Telegram)
  homeassistant:
    min_version: 2024.10.0
  description: 'AI-powered summaries for security camera events. Sends notifications to Telegram with event analysis and images.'
  domain: automation
  source_url: https://raw.githubusercontent.com/valentinfrlch/ha-llmvision/refs/heads/main/blueprints/event_summary.yaml
  input:
    telegram_section:
      name: Telegram Settings
      description: Configuration for Telegram notifications.
      icon: mdi:telegram
      input:
        telegram_config_entry_id:
          name: Telegram Config Entry ID
          description: The config entry ID for your Telegram bot
          default: "01K5Q0YTVD69JC5CD85573RKSE"
          selector:
            text:
              multiline: false
        telegram_target:
          name: Telegram Chat ID
          description: The chat ID to send notifications to
          default: "7882720724"
          selector:
            text:
              multiline: false
    run_conditions:
      name: Run Conditions
      description: All conditions must be true in order for the blueprint to run.
      default: []
      selector:
        condition: {}
    cooldown:
      name: Cooldown
      description: Time to wait before running automation again. Strongly recommended for busy areas.
      default:
        minutes: 10
      selector:
        duration: {}
    camera_sensor_section:
      name: Camera & Sensor Settings
      description: Settings for the camera and sensor entities.
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: List of camera entities to monitor
          default: []
          selector:
            entity:
              multiple: true
              filter:
              - domain:
                - camera
              reorder: false
        trigger_state:
          name: Trigger State
          description: Automation starts when one of your camera changes to this state.
          default: recording
          selector:
            text:
              multiline: false
              multiple: false
        motion_sensors:
          name: Motion Sensor
          description: Set if your cameras don't change state (Frigate). Use the same order used for camera entities.
          default: []
          selector:
            entity:
              multiple: true
              filter:
              - domain:
                - binary_sensor
              reorder: false
        duration:
          name: Duration
          description: Duration to record for analysis (in seconds).
          default: 5
          selector:
            number:
              min: 1.0
              max: 60.0
              step: 1.0
              mode: slider
        max_frames:
          name: Max Frames
          description: How many frames to analyze. Picks frames with the most movement.
          default: 3
          selector:
            number:
              min: 1.0
              max: 60.0
              step: 1.0
              mode: slider
    ai_section:
      name: AI Settings
      description: AI settings for the analysis.
      icon: mdi:brain
      collapsed: true
      input:
        remember:
          name: Store in Timeline
          description: Stores this event in the Timeline so you can ask about it. If important is enabled, only events classified as Normal or Critical will be saved.
          default: true
          selector:
            boolean: {}
        use_memory:
          name: Use Memory
          description: Use information stored in memory to provide additional context. Memory must be set up.
          default: false
          selector:
            boolean: {}
        message:
          name: Prompt
          description: Model prompt for the video_analyzer action
          default: 'Summarize the events based on a series of images captured at short intervals. Focus only on moving subjects such as people, vehicles, and other active elements. Ignore static objects and scenery. Provide a clear and concise account of movements and interactions. Do not mention or imply the existence of imagesâ€”present the information as if directly observing the events. If no movement is detected, respond with: ''No activity observed.'''
          selector:
            text:
              multiline: true
              multiple: false
        provider:
          name: Provider
          description: Provider to use for analysis. See docs for additional information.
          selector:
            config_entry:
              integration: llmvision
        model:
          name: Model
          description: Which model to use. Depends on chosen provider.
          selector:
            text:
              multiline: false
              multiple: false
        target_width:
          name: Target Width
          description: Downscale images (uses less tokens and speeds up processing)
          default: 1280
          selector:
            number:
              min: 512.0
              max: 3840.0
              step: 1.0
              mode: slider
        max_tokens:
          name: Maximum Tokens
          description: Maximum number of tokens to generate. Use this to control the length of the summaries.
          default: 20
          selector:
            number:
              min: 1.0
              max: 300.0
              step: 1.0
              mode: slider
    notification_section:
      name: Telegram Notification Settings
      description: Settings for Telegram notification delivery.
      icon: mdi:bell
      collapsed: true
      input:
        notify:
          name: Notify
          description: Send notification to Telegram.
          default: true
          selector:
            boolean: {}
        condition_notify:
          name: Condition to Notify
          description: Condition to notify Telegram.
          default: []
          selector:
            condition: {}
        notification_delivery:
          name: Notification Delivery
          description: "Controls how notifications are delivered. **Dynamic** immediately notifies with a snapshot before analysis and updates with summary once available. **Consolidated** delays notification until event summary is generated."
          default: Dynamic
          selector:
            select:
              options:
              - Dynamic
              - Consolidated
              sort: false
              multiple: false
              custom_value: false
        notification_time:
          name: Notification Time
          description: Add time to notification title and choose between 12-hour or 24-hour time format.
          default: ''
          selector:
            select:
              options:
              - label: No Time Added
                value: ''
              - label: 12 Hour
                value: at {{ now().strftime("%-I:%M %p") }}
              - label: 24 Hour
                value: at {{ now().strftime("%H:%M") }}
              sort: false
              multiple: false
              custom_value: false
        file_path:
          name: File Path for Snapshots
          description: "The file path to store snapshots for Telegram. Must be accessible to Home Assistant."
          default: /media/snapshots/{{ camera_file_path }}/last_motion.jpg
          selector:
            select:
              options:
              - label: Media Folder
                value: /media/snapshots/{{ camera_file_path }}/last_motion.jpg
              - label: Config WWW Folder
                value: /config/www/snapshots/{{ camera_file_path }}/last_motion.jpg
              custom_value: true
              sort: false
              multiple: false
        delay_notification:
          name: Notification Cooldown
          description: Time in seconds to wait before sending another notification.
          default: 60
          selector:
            number:
              min: 0.0
              max: 86400.0
              unit_of_measurement: seconds
              mode: box
              step: 1.0
    experimental_section:
      name: Experimental Settings
      description: Experimental features. Use with caution.
      icon: mdi:apple-keyboard-option
      collapsed: true
      input:
        important:
          name: Important (Experimental)
          description: 'Use AI to classify events as Critical, Normal or Low. Notifications are sent only for events classified as Normal or higher.'
          default: false
          selector:
            boolean: {}
        additional_actions:
          name: Additional Actions (Experimental)
          description: Additional actions to run after the AI analysis and notification.
          default: []
          selector:
            action: {}

variables:
  important: !input important
  remember: !input remember
  cooldown: !input cooldown
  telegram_config_entry_id: !input telegram_config_entry_id
  telegram_target: !input telegram_target
  notification_delivery: !input notification_delivery
  additional_actions: !input additional_actions
  notify: !input notify
  condition_notify: !input condition_notify
  delay_notification: !input delay_notification
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  camera_entity: "{% if motion_sensors_list and not trigger.entity_id.startswith(\"camera\") %}\n  {% set index = motion_sensors_list.index(trigger.entity_id) %}\n    {{ camera_entities_list[index] }}\n{% else %}\n  {{ trigger.entity_id }}\n{% endif %}\n"
  tag: '{{ camera_entity + int(as_timestamp(now()))|string }}'
  label: Motion detected
  camera_message: '{{ camera_entity.replace("camera.", "").replace("_", " ")|capitalize }}'
  camera: '{{ camera_entities_list[0].replace("camera.", "").replace("_", " ") | title }}'
  importance_prompt: 'Classify the security event based on this image. Choose from the following options: "passive" for unimportant events, "time-sensitive" for notable but non-critical events such as a person at the front door, and "critical" only for potential burglaries or highly suspicious activity. Respond with one of these options exactly, without additional explanation.'
  camera_entity_snapshot: '{{ camera_entities_list[0] }}'
  camera_file_path: '{{ camera_entity_snapshot.replace("camera.", "")}}'
  file_path: !input file_path
  notification_time: !input notification_time

max_exceeded: silent
mode: single

triggers:
- trigger: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- trigger: state
  entity_id: !input motion_sensors
  to: 'on'
  id: motion_sensor_trigger

condition:
- condition: and
  conditions: !input run_conditions

action:
# Send Telegram message when manually triggered via "Run actions" button
- action: telegram_bot.send_message
  data:
    config_entry_id: !input telegram_config_entry_id
    target: !input telegram_target
    message: "ðŸ”§ Manual automation trigger activated for {{ camera }} camera monitoring at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

- choose:
  - conditions:
    - condition: template
      value_template: '{{ important }}'
    sequence:
    - action: llmvision.image_analyzer
      data:
        image_entity: '{{[camera_entity]}}'
        provider: !input provider
        model: !input model
        message: '{{importance_prompt}}'
        include_filename: true
        target_width: 1280
        max_tokens: 3
      response_variable: importance

- choose:
  - conditions:
    - condition: template
      value_template: '{{ important and importance.response_text|lower == ''passive'' }}'
    sequence:
    - stop: Event is not important

- if:
  - condition: template
    value_template: !input notify
  then:
  - if:
    - condition: !input condition_notify
    then:
    - if:
      - condition: template
        value_template: '{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > delay_notification }}'
      then:
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ notification_delivery == ''Dynamic'' }}'
          sequence:
          - service: camera.snapshot
            entity_id: !input camera_entities
            data:
              filename: !input file_path
          - action: telegram_bot.send_photo
            data:
              config_entry_id: !input telegram_config_entry_id
              target: !input telegram_target
              file: !input file_path
              caption: '{{ label }} {{ notification_time }} - {{camera_message}} has detected activity. Analyzing...'

- alias: Analyze event
  action: llmvision.stream_analyzer
  data:
    image_entity: '{{[camera_entity]}}'
    duration: !input duration
    provider: !input provider
    model: !input model
    message: !input message
    use_memory: !input use_memory
    remember: !input remember
    expose_images: true
    generate_title: !input remember
    include_filename: true
    max_frames: !input max_frames
    target_width: !input target_width
    max_tokens: !input max_tokens
  response_variable: response

- alias: Update label with title
  variables:
    label: '{{response.title}}'

- if:
  - condition: template
    value_template: !input notify
  then:
  - if:
    - condition: !input condition_notify
    then:
    - if:
      - condition: template
        value_template: '{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > delay_notification }}'
      then:
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ notification_delivery == ''Dynamic'' }}'
          sequence:
          - action: telegram_bot.send_photo
            data:
              config_entry_id: !input telegram_config_entry_id
              target: !input telegram_target
              file: '{{response.key_frame}}'
              caption: '{{ label }} {{ notification_time }} - {{response.response_text}}'
        - conditions:
          - condition: template
            value_template: '{{ notification_delivery == ''Consolidated'' }}'
          sequence:
          - action: telegram_bot.send_photo
            data:
              config_entry_id: !input telegram_config_entry_id
              target: !input telegram_target
              file: '{{response.key_frame}}'
              caption: '{{ label }} {{ notification_time }} - {{response.response_text}}'

- choose: []
  default: !input additional_actions

- delay: !input cooldown
