blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.6.0)
  author: valentinfrlch (modified for Telegram - rebuilt)
  homeassistant:
    min_version: 2024.10.0
  description: 'AI-powered camera event summaries with smart filtering, timeline storage, memory integration, API fallback handling, and Frigate clip/GIF support.'
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          description: The chat ID to send notifications to
          default: "7882720724"
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          description: Add time to notification messages
          default: "12hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
        delay_notification:
          name: Notification Cooldown (Seconds)
          description: Time to wait before sending another notification (separate from automation cooldown)
          default: 60
          selector:
            number:
              min: 0
              max: 3600
              step: 1
        media_type:
          name: Media Type
          description: Type of media to send with notifications
          default: "snapshot"
          selector:
            select:
              options:
                - label: "Static Snapshot"
                  value: "snapshot"
                - label: "Frigate Clip (MP4) - Real events only"
                  value: "clip"
                - label: "Frigate GIF - Real events only"
                  value: "gif"
        manual_trigger_action:
          name: Manual Trigger Action
          description: What to do for manual triggers (no Frigate event exists)
          default: "create_event"
          selector:
            select:
              options:
                - label: "Create Frigate Event (recommended)"
                  value: "create_event"
                - label: "Use Snapshot Only"
                  value: "snapshot_only"
        wait_for_frigate:
          name: Wait for Frigate Processing
          description: Time to wait for Frigate to generate clip/GIF (seconds)
          default: 8
          selector:
            number:
              min: 1
              max: 30
              step: 1
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: Camera entities to monitor (can select multiple)
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          description: Motion sensors for cameras (same order as cameras). Leave empty if cameras change state directly.
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          description: State that triggers the automation for cameras
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Automation Cooldown (Minutes)
          description: Time to wait before running automation again after completion
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
        frigate_base_url:
          name: Frigate Base URL
          description: Base URL for Frigate (e.g., http://frigate.local:5000)
          default: "http://frigate.local:5000"
          selector:
            text: {}
    ai_section:
      name: AI Analysis Settings
      icon: mdi:brain
      input:
        provider:
          name: LLM Provider
          description: Provider for AI analysis
          selector:
            config_entry:
              integration: llmvision
        model:
          name: Model
          description: Model to use
          default: "gpt-4o-mini"
          selector:
            text: {}
        ai_prompt:
          name: AI Analysis Prompt
          description: Prompt sent to AI for analyzing camera footage
          default: "Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. Be concise."
          selector:
            text:
              multiline: true
        duration:
          name: Analysis Duration (Seconds)
          description: How long to record for analysis
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          description: Maximum number of frames to analyze
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          description: Resize images to this width (lower = faster, less detail)
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          description: Maximum length of AI response (higher = more detailed)
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        use_memory:
          name: Use Memory
          description: Use information stored in memory to provide additional context (requires LLMVision memory setup)
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          description: Store events in Home Assistant timeline for review
          default: true
          selector:
            boolean: {}
    fallback_section:
      name: API Fallback Settings
      icon: mdi:backup-restore
      input:
        enable_fallback:
          name: Enable API Fallback
          description: Use fallback behavior when AI API fails (quota exceeded, service unavailable, etc.)
          default: true
          selector:
            boolean: {}
        fallback_mode:
          name: Fallback Mode
          description: What to do when AI analysis fails
          default: "simple_notification"
          selector:
            select:
              options:
                - label: "Simple Notification (Motion detected only)"
                  value: "simple_notification"
                - label: "Time-based Message (Morning=delivery, Evening=visitor, etc.)"
                  value: "time_based"
                - label: "No Notification (Silent failure)"
                  value: "silent"
        show_api_errors:
          name: Show API Error Messages
          description: Send error details to Telegram when API fails (for debugging)
          default: false
          selector:
            boolean: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          description: Use AI to filter out unimportant events
          default: false
          selector:
            boolean: {}
        show_filtered_events:
          name: Show Filtered Events
          description: Send a brief message when events are filtered out
          default: false
          selector:
            boolean: {}

variables:
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  delay_notification: !input delay_notification
  importance_filtering: !input importance_filtering
  show_filtered_events: !input show_filtered_events
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  enable_fallback: !input enable_fallback
  fallback_mode: !input fallback_mode
  show_api_errors: !input show_api_errors
  ai_prompt: !input ai_prompt
  media_type: !input media_type
  manual_trigger_action: !input manual_trigger_action
  wait_for_frigate: !input wait_for_frigate
  frigate_base_url: !input frigate_base_url
  
  is_manual_trigger: "{{ trigger is not defined }}"
  
  # Camera entity detection
  camera_entity: >
    {% if motion_sensors and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  
  # Time formatting
  time_suffix: >
    {% if notification_time == "12hour" %}
      {{ " at " + now().strftime("%-I:%M %p") }}
    {% elif notification_time == "24hour" %}
      {{ " at " + now().strftime("%H:%M") }}
    {% else %}
      {{ "" }}
    {% endif %}
  
  camera_name: '{{ camera_entity.replace("camera.", "").replace("_", " ").title() }}'
  frigate_camera_name: '{{ camera_entity.replace("camera.", "") }}'
  snapshot_path: '/config/www/snapshots/{{ frigate_camera_name }}_snapshot.jpg'
  
  # FIXED: Better event ID detection
  event_id: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.id }}
    {% elif is_manual_trigger %}
      manual_{{ now().strftime('%Y%m%d_%H%M%S') }}
    {% else %}
      fallback_{{ now().strftime('%Y%m%d_%H%M%S') }}
    {% endif %}
  
  # Determine if this is a real Frigate event or manual/fallback
  has_real_frigate_event: >
    {{ trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined }}
  
  # Frigate media URLs (only valid for real events)
  frigate_clip_url: "{{ frigate_base_url }}/api/events/{{ event_id }}/clip.mp4"
  frigate_gif_url: "{{ frigate_base_url }}/api/events/{{ event_id }}/preview.gif"
  
  # Local file paths for downloaded media
  clip_path: '/config/www/snapshots/{{ frigate_camera_name }}_{{ event_id }}.mp4'
  gif_path: '/config/www/snapshots/{{ frigate_camera_name }}_{{ event_id }}.gif'
  
  # Cooldown duration in seconds
  cooldown_seconds: "{{ cooldown_minutes * 60 }}"
  
  # Fallback message based on time of day
  time_based_message: >
    {% set hour = now().hour %}
    {% if hour >= 6 and hour < 12 %}
      Morning delivery or service visit detected
    {% elif hour >= 12 and hour < 17 %}
      Daytime visitor or delivery detected
    {% elif hour >= 17 and hour < 22 %}
      Evening visitor detected
    {% else %}
      Late night motion detected
    {% endif %}
  
  # Importance prompt
  importance_prompt: >
    Classify the security event based on this image. Choose from the following options: "passive" for unimportant events, "time-sensitive" for notable but non-critical events such as a person at the front door, and "critical" only for potential burglaries or highly suspicious activity. Respond with one of these options exactly, without additional explanation.

max_exceeded: silent
mode: single

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state  
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger

action:
# Manual trigger notification
- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "🔧 Manual trigger for {{ camera_name }}{{ time_suffix }}"

# Handle manual triggers by creating Frigate event (if configured)
- if:
  - condition: template
    value_template: "{{ is_manual_trigger and manual_trigger_action == 'create_event' and media_type in ['clip', 'gif'] }}"
  then:
  - service: rest_command.create_frigate_event
    data:
      frigate_url: "{{ frigate_base_url }}/api/events/{{ frigate_camera_name }}/manual/create"
      payload: '{"duration": 10, "include_recording": true}'
    continue_on_error: true
  - delay:
      seconds: 2
  # Update event_id to use the latest event from this camera
  - variables:
      event_id: "{{ state_attr('sensor.frigate_' + frigate_camera_name + '_latest_event', 'event_id') | default('manual_' + now().strftime('%Y%m%d_%H%M%S')) }}"
      has_real_frigate_event: true

# Importance filtering BEFORE notifications
- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering }}"
    sequence:
    - service: llmvision.image_analyzer
      data:
        image_entity: ["{{ camera_entity }}"]
        provider: !input provider
        model: !input model
        message: "{{ importance_prompt }}"
        include_filename: false
        target_width: !input target_width
        max_tokens: 3
      response_variable: importance
      continue_on_error: true

# Stop if event is passive
- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering and importance.response_text|lower == 'passive' }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Filtered (passive) - no alert sent"
    - stop: "Event is not important"

# Notification cooldown check
- if:
  - condition: template
    value_template: "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > delay_notification }}"
  then:
  
  # Wait for Frigate to process the event (if using clip/gif and have real event)
  - if:
    - condition: template
      value_template: "{{ media_type in ['clip', 'gif'] and has_real_frigate_event }}"
    then:
    - delay:
        seconds: !input wait_for_frigate
  
  # Send media based on type selection
  - choose:
    # Static snapshot (always works)
    - conditions:
      - condition: template
        value_template: "{{ media_type == 'snapshot' or not has_real_frigate_event }}"
      sequence:
      - service: camera.snapshot
        target:
          entity_id: "{{ camera_entity }}"
        data:
          filename: "{{ snapshot_path }}"
      
      - service: telegram_bot.send_photo
        data:
          target: !input telegram_target
          file: "{{ snapshot_path }}"
          caption: "{{ camera_name }}{{ time_suffix }} - analyzing..."
    
    # Frigate Clip (MP4) - only for real events
    - conditions:
      - condition: template
        value_template: "{{ media_type == 'clip' and has_real_frigate_event }}"
      sequence:
      # Download Frigate clip
      - service: downloader.download_file
        data:
          url: "{{ frigate_clip_url }}"
          filename: "{{ clip_path }}"
        continue_on_error: true
      
      # Send clip or fallback to snapshot
      - delay:
          seconds: 1
      - choose:
        - conditions:
          - condition: template
            value_template: "{{ states('sensor.file_exists_' + frigate_camera_name) == 'on' }}"
          sequence:
          - service: telegram_bot.send_video
            data:
              target: !input telegram_target
              file: "{{ clip_path }}"
              caption: "{{ camera_name }}{{ time_suffix }} - analyzing..."
        default:
        # Fallback to snapshot
        - service: camera.snapshot
          target:
            entity_id: "{{ camera_entity }}"
          data:
            filename: "{{ snapshot_path }}"
        
        - service: telegram_bot.send_photo
          data:
            target: !input telegram_target
            file: "{{ snapshot_path }}"
            caption: "{{ camera_name }}{{ time_suffix }} - analyzing... (clip unavailable)"
    
    # Frigate GIF - only for real events
    - conditions:
      - condition: template
        value_template: "{{ media_type == 'gif' and has_real_frigate_event }}"
      sequence:
      # Download Frigate GIF
      - service: downloader.download_file
        data:
          url: "{{ frigate_gif_url }}"
          filename: "{{ gif_path }}"
        continue_on_error: true
      
      # Send GIF or fallback to snapshot
      - delay:
          seconds: 1
      - choose:
        - conditions:
          - condition: template
            value_template: "{{ states('sensor.file_exists_' + frigate_camera_name) == 'on' }}"
          sequence:
          - service: telegram_bot.send_animation
            data:
              target: !input telegram_target
              file: "{{ gif_path }}"
              caption: "{{ camera_name }}{{ time_suffix }} - analyzing..."
        default:
        # Fallback to snapshot
        - service: camera.snapshot
          target:
            entity_id: "{{ camera_entity }}"
          data:
            filename: "{{ snapshot_path }}"
        
        - service: telegram_bot.send_photo
          data:
            target: !input telegram_target
            file: "{{ snapshot_path }}"
            caption: "{{ camera_name }}{{ time_suffix }} - analyzing... (GIF unavailable)"

  # Main AI Analysis
  - service: llmvision.stream_analyzer
    data:
      image_entity: ["{{ camera_entity }}"]
      duration: !input duration
      provider: !input provider
      model: !input model
      message: "{{ ai_prompt }}"
      max_frames: !input max_frames
      target_width: !input target_width
      max_tokens: !input max_tokens
      use_memory: !input use_memory
      remember: !input store_timeline
      generate_title: !input store_timeline
      expose_images: !input store_timeline
      include_filename: true
    response_variable: analysis
    continue_on_error: true

  # Handle AI analysis result or fallback
  - choose:
    # Success - AI analysis worked
    - conditions:
      - condition: template
        value_template: "{{ analysis is defined and analysis.response_text is defined and analysis.response_text != '' }}"
      sequence:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "{{ analysis.response_text }}"
    
    # Fallback - AI analysis failed
    - conditions:
      - condition: template
        value_template: "{{ enable_fallback }}"
      sequence:
      - if:
        - condition: template
          value_template: "{{ show_api_errors }}"
        then:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "🚨 {{ camera_name }}{{ time_suffix }} - AI API failed - using fallback"
      
      # Send fallback notification based on mode
      - choose:
        - conditions:
          - condition: template
            value_template: "{{ fallback_mode == 'simple_notification' }}"
          sequence:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "{{ camera_name }} motion detected (AI unavailable)"
        
        - conditions:
          - condition: template
            value_template: "{{ fallback_mode == 'time_based' }}"
          sequence:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "{{ time_based_message }} (AI unavailable)"
        
        # Silent mode - do nothing
        default: []

    # No fallback enabled - send error message
    default:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: "❌ {{ camera_name }}{{ time_suffix }} - AI analysis failed and no fallback configured"

# Automation cooldown delay
- if:
  - condition: template
    value_template: "{{ not is_manual_trigger and cooldown_minutes > 0 }}"
  then:
  - delay:
      seconds: "{{ cooldown_seconds }}"
