blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.7.3.2)
  author: valentinfrlch (modified for Telegram - v1.7 branch)
  homeassistant:
    min_version: 2024.10.0
  description: >
    AI-powered camera event summaries with optimized model order and toggleable diagnostics.
    v1.7.3.2 - Optimized Model Order: Alternating reliable/premium models for best performance.
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          description: The chat ID to send notifications to
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          description: Add time to notification messages
          default: "12hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
        delay_notification:
          name: Notification Cooldown (Seconds)
          description: Time to wait before sending another notification (separate from automation cooldown)
          default: 60
          selector:
            number:
              min: 0
              max: 3600
              step: 1
        media_type:
          name: Media Type
          description: Type of media to send with notifications
          default: "snapshot"
          selector:
            select:
              options:
                - label: "Static Snapshot"
                  value: "snapshot"
                - label: "Frigate Clip (MP4) - Real events only"
                  value: "clip"
                - label: "Frigate GIF - Real events only"
                  value: "gif"
        wait_for_frigate:
          name: Wait for Frigate Processing (Seconds)
          description: Time to wait for Frigate to generate clip/GIF
          default: 8
          selector:
            number:
              min: 1
              max: 30
              step: 1
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: Camera entities to monitor (can select multiple)
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          description: Motion sensors for cameras (same order as cameras). Leave empty if cameras change state directly.
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          description: State that triggers the automation for cameras
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Automation Cooldown (Minutes)
          description: Time to wait before running automation again after completion
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
        frigate_base_url:
          name: Frigate Base URL
          description: Base URL for Frigate (e.g., http://frigate.local:5000)
          default: "http://frigate.local:5000"
          selector:
            text: {}
    ai_section:
      name: Primary AI Settings
      icon: mdi:brain
      input:
        provider:
          name: Primary LLM Provider
          description: Primary provider for AI analysis
          selector:
            config_entry:
              integration: llmvision
        model_list:
          name: Primary Provider Models (Priority Order)
          description: "Semicolon-separated list of models to try in order (alternating reliable/premium strategy)"
          default: "gemini-2.0-flash;gemini-2.5-pro;gemini-2.0-flash-lite;gemini-2.5-flash;gemini-1.5-flash;gemini-2.5-flash-lite"
          selector:
            text: {}
        ai_prompt:
          name: AI Analysis Prompt
          description: Prompt sent to AI for analyzing camera footage
          default: "Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. Be concise."
          selector:
            text:
              multiline: true
        duration:
          name: Analysis Duration (Seconds)
          description: How long to record for analysis
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          description: Maximum number of frames to analyze
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          description: Resize images to this width (lower = faster, less detail)
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          description: Maximum length of AI response (higher = more detailed)
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        use_memory:
          name: Use Memory
          description: Use information stored in memory to provide additional context (requires LLMVision memory setup)
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          description: Store events in Home Assistant timeline for review
          default: true
          selector:
            boolean: {}
    llm_fallback_section:
      name: LLM Fallback Settings
      icon: mdi:backup-restore-alert
      input:
        enable_secondary_provider:
          name: Enable Secondary Provider Fallback
          description: Use different provider when all primary models fail
          default: false
          selector:
            boolean: {}
        secondary_provider:
          name: Secondary LLM Provider
          description: Fallback provider when all primary models fail (only required if secondary provider is enabled)
          default: null
          selector:
            config_entry:
              integration: llmvision
        secondary_model_list:
          name: Secondary Provider Models (Priority Order)
          description: "Semicolon-separated list of secondary models to try (e.g., llama-3.2-90b-vision-preview;llama-3.2-11b-vision-preview)"
          default: "llama-3.2-90b-vision-preview;llama-3.2-11b-vision-preview"
          selector:
            text: {}
        show_model_usage:
          name: Show Which Model Succeeded
          description: Include which model was used in the response
          default: true
          selector:
            boolean: {}
        show_fallback_notifications:
          name: Show Fallback Attempts
          description: Send notification when trying fallback models (debug)
          default: false
          selector:
            boolean: {}
    diagnostics_section:
      name: Diagnostic Settings
      icon: mdi:bug-check
      input:
        enable_diagnostics:
          name: Enable All Diagnostics
          description: Master switch for all diagnostic messages (turn OFF for clean production use)
          default: false
          selector:
            boolean: {}
        detailed_error_logging:
          name: Enable Detailed Error Logging
          description: Send comprehensive error details to Telegram for each model attempt (only if diagnostics enabled)
          default: true
          selector:
            boolean: {}
        log_successful_attempts:
          name: Log Successful Model Attempts
          description: Send diagnostic info even when models succeed (verbose debugging)
          default: false
          selector:
            boolean: {}
        log_response_metadata:
          name: Log Response Metadata
          description: Include response timing, token usage, and other metadata in diagnostics
          default: true
          selector:
            boolean: {}
        diagnostic_prompt_info:
          name: Include Prompt Information
          description: Include prompt length and content preview in diagnostics
          default: false
          selector:
            boolean: {}
    object_section:
      name: Object Detection Settings
      icon: mdi:target
      input:
        use_object_filter:
          name: Enable Object Filtering
          description: Only send notifications when specific objects are detected
          default: false
          selector:
            boolean: {}
        required_objects:
          name: Required Objects
          description: Only send alerts when these objects are detected (comma-separated list). Leave empty to disable.
          default: "person,car,truck,bicycle,motorcycle,dog,cat"
          selector:
            text: {}
        blocked_objects:
          name: Blocked Objects  
          description: Never send alerts when only these objects are detected (comma-separated list). Leave empty to disable.
          default: ""
          selector:
            text: {}
    frigate_enhanced_section:
      name: Frigate v0.16 Enhanced Features
      icon: mdi:face-recognition
      input:
        use_frigate_enhanced:
          name: Enable Frigate Enhanced Features
          description: Use Frigate v0.16+ enhanced analysis in AI prompts
          default: false
          selector:
            boolean: {}
        use_face_recognition:
          name: Enable Face Recognition Data
          description: Use Frigate's face recognition results in AI analysis
          default: true
          selector:
            boolean: {}
        include_confidence_scores:
          name: Include Confidence Scores
          description: Add object detection confidence scores to AI context
          default: true
          selector:
            boolean: {}
        use_zone_context:
          name: Enable Zone Context
          description: Include zone information in AI analysis
          default: true
          selector:
            boolean: {}
        face_confidence_threshold:
          name: Face Recognition Confidence Threshold
          description: Minimum confidence to include face names (0-100)
          default: 75
          selector:
            number:
              min: 0
              max: 100
              step: 5
    fallback_section:
      name: Final Fallback Settings
      icon: mdi:backup-restore
      input:
        enable_final_fallback:
          name: Enable Final Non-LLM Fallback
          description: Use basic fallback when all LLMs fail
          default: true
          selector:
            boolean: {}
        fallback_mode:
          name: Final Fallback Mode
          description: What to do when all AI analysis fails
          default: "simple_notification"
          selector:
            select:
              options:
                - label: "Simple Notification (Motion detected only)"
                  value: "simple_notification"
                - label: "Time-based Message (Morning=delivery, Evening=visitor, etc.)"
                  value: "time_based"
                - label: "No Notification (Silent failure)"
                  value: "silent"
        show_api_errors:
          name: Show API Error Messages
          description: Send error details to Telegram when AI fails (for debugging)
          default: false
          selector:
            boolean: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          description: Use AI to filter out unimportant events
          default: false
          selector:
            boolean: {}
        show_filtered_events:
          name: Show Filtered Events
          description: Send a brief message when events are filtered out
          default: false
          selector:
            boolean: {}

variables:
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  delay_notification: !input delay_notification
  importance_filtering: !input importance_filtering
  show_filtered_events: !input show_filtered_events
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  enable_final_fallback: !input enable_final_fallback
  fallback_mode: !input fallback_mode
  show_api_errors: !input show_api_errors
  ai_prompt: !input ai_prompt
  media_type: !input media_type
  wait_for_frigate: !input wait_for_frigate
  frigate_base_url: !input frigate_base_url
  use_object_filter: !input use_object_filter
  required_objects: !input required_objects
  blocked_objects: !input blocked_objects
  
  # Multi-model fallback variables
  model_list: !input model_list
  primary_models: "{{ model_list.split(';') | map('trim') | list }}"
  enable_secondary_provider: !input enable_secondary_provider
  secondary_provider: !input secondary_provider
  secondary_model_list: !input secondary_model_list
  secondary_models: "{{ secondary_model_list.split(';') | map('trim') | list }}"
  show_model_usage: !input show_model_usage
  show_fallback_notifications: !input show_fallback_notifications
  
  # NEW: Master diagnostic control
  enable_diagnostics: !input enable_diagnostics
  detailed_error_logging: !input detailed_error_logging
  log_successful_attempts: !input log_successful_attempts
  log_response_metadata: !input log_response_metadata
  diagnostic_prompt_info: !input diagnostic_prompt_info
  
  # Enhanced Frigate data variables
  use_frigate_enhanced: !input use_frigate_enhanced
  use_face_recognition: !input use_face_recognition
  include_confidence_scores: !input include_confidence_scores
  use_zone_context: !input use_zone_context
  face_confidence_threshold: !input face_confidence_threshold
  
  is_manual_trigger: "{{ trigger is not defined }}"
  
  # Camera entity detection (matches reference blueprint)
  camera_entity: >
    {% if motion_sensors and not trigger.entity_id.startswith("camera") %}
      {% set index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[index] }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  
  # Time formatting
  time_suffix: >
    {% if notification_time == "12hour" %}
      {{ " at " + now().strftime("%-I:%M %p") }}
    {% elif notification_time == "24hour" %}
      {{ " at " + now().strftime("%H:%M") }}
    {% else %}
      {{ "" }}
    {% endif %}
  
  camera_name: '{{ camera_entity.replace("camera.", "").replace("_", " ").title() }}'
  frigate_camera_name: '{{ camera_entity.replace("camera.", "") }}'
  snapshot_path: '/config/www/snapshots/{{ frigate_camera_name }}_snapshot.jpg'
  
  # Extract enhanced Frigate event data - SAFE VERSION
  frigate_event_data: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after }}
    {% else %}
      {}
    {% endif %}
  
  # Event ID detection (improved logic)
  event_id: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.id }}
    {% else %}
      {{ now().strftime('%Y%m%d_%H%M%S') }}_manual
    {% endif %}
  
  # Object filtering logic (matches reference blueprint pattern)
  required_objects_list: "{{ required_objects.split(',') | map('trim') | list if required_objects else [] }}"
  blocked_objects_list: "{{ blocked_objects.split(',') | map('trim') | list if blocked_objects else [] }}"
  
  # Determine if this is a real Frigate event
  has_real_frigate_event: >
    {{ trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined }}
  
  # Get detected objects from trigger (if available)
  detected_objects: >
    {% if trigger.platform == 'mqtt' and trigger.payload_json is defined and trigger.payload_json.after is defined %}
      {{ trigger.payload_json.after.data.objects | default([]) }}
    {% else %}
      []
    {% endif %}
  
  # FIXED: Safe Frigate context generation - only if enabled and data exists
  frigate_context: >
    {% if use_frigate_enhanced and has_real_frigate_event %}
      {% set context_parts = [] %}
      
      {# Basic object detection #}
      {% if detected_objects %}
        {% set context_parts = context_parts + ["Objects: " + detected_objects | join(", ")] %}
      {% endif %}
      
      {# Only add if context exists #}
      {% if context_parts %}
        {{ "Frigate detected " + context_parts | join("; ") + "." }}
      {% else %}
        {{ "" }}
      {% endif %}
    {% else %}
      {{ "" }}
    {% endif %}
  
  # Enhanced AI prompt - safer version
  enhanced_ai_prompt: >
    {% if frigate_context and frigate_context != "" %}
      {{ frigate_context }} {{ ai_prompt }}
    {% else %}
      {{ ai_prompt }}
    {% endif %}
  
  # Object filter check
  object_filter_passed: >
    {% if not use_object_filter %}
      {{ true }}
    {% else %}
      {% set objects = detected_objects %}
      {% if required_objects_list and objects %}
        {% set required_found = objects | select('in', required_objects_list) | list | length > 0 %}
      {% else %}
        {% set required_found = true %}
      {% endif %}
      {% if blocked_objects_list and objects %}
        {% set only_blocked = objects | reject('in', blocked_objects_list) | list | length == 0 %}
      {% else %}
        {% set only_blocked = false %}
      {% endif %}
      {{ required_found and not only_blocked }}
    {% endif %}
  
  # Frigate media URLs
  frigate_clip_url: "{{ frigate_base_url }}/api/events/{{ event_id }}/clip.mp4"
  frigate_gif_url: "{{ frigate_base_url }}/api/events/{{ event_id }}/preview.gif"
  
  # Local file paths for downloaded media
  clip_path: '/config/www/snapshots/{{ frigate_camera_name }}_{{ event_id }}.mp4'
  gif_path: '/config/www/snapshots/{{ frigate_camera_name }}_{{ event_id }}.gif'
  
  # Fallback message based on time of day
  time_based_message: >
    {% set hour = now().hour %}
    {% if hour >= 6 and hour < 12 %}
      Morning delivery or service visit detected
    {% elif hour >= 12 and hour < 17 %}
      Daytime visitor or delivery detected
    {% elif hour >= 17 and hour < 22 %}
      Evening visitor detected
    {% else %}
      Late night motion detected
    {% endif %}
  
  # Importance prompt (matches reference blueprint style)
  importance_prompt: >
    Classify the security event based on this image. Choose from the following options: "passive" for unimportant events, "time-sensitive" for notable but non-critical events such as a person at the front door, and "critical" only for potential burglaries or highly suspicious activity. Respond with one of these options exactly, without additional explanation.

max_exceeded: silent
mode: single

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state  
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger

action:
# Manual trigger notification
- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "🔧 Manual trigger for {{ camera_name }}{{ time_suffix }}"

# Object filtering check (matches reference blueprint logic)
- choose:
  - conditions:
    - condition: template
      value_template: "{{ use_object_filter and not object_filter_passed }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Object filter blocked: {{ detected_objects | join(', ') }}"
    - stop: "Objects do not match filter criteria"

# Importance filtering (matches reference blueprint flow)
- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering }}"
    sequence:
    - service: llmvision.image_analyzer
      data:
        image_entity: ["{{ camera_entity }}"]
        provider: !input provider
        model: "{{ primary_models[0] }}"
        message: "{{ importance_prompt }}"
        include_filename: false
        target_width: !input target_width
        max_tokens: 3
      response_variable: importance
      continue_on_error: true

# Stop if event is passive (matches reference blueprint)
- choose:
  - conditions:
    - condition: template
      value_template: "{{ importance_filtering and importance.response_text|lower == 'passive' }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ camera_name }}{{ time_suffix }} - Filtered (passive) - no alert sent"
    - stop: "Event is not important"

# Notification cooldown check
- if:
  - condition: template
    value_template: "{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > delay_notification }}"
  then:
  
  # Wait for Frigate processing if needed
  - if:
    - condition: template
      value_template: "{{ media_type in ['clip', 'gif'] and has_real_frigate_event }}"
    then:
    - delay:
        seconds: !input wait_for_frigate
  
  # Send media based on type selection
  - choose:
    # Static snapshot
    - conditions:
      - condition: template
        value_template: "{{ media_type == 'snapshot' or not has_real_frigate_event }}"
      sequence:
      - service: camera.snapshot
        target:
          entity_id: "{{ camera_entity }}"
        data:
          filename: "{{ snapshot_path }}"
      
      - service: telegram_bot.send_photo
        data:
          target: !input telegram_target
          file: "{{ snapshot_path }}"
          caption: "{{ camera_name }}{{ time_suffix }} - analyzing..."
    
    # Frigate Clip (MP4)
    - conditions:
      - condition: template
        value_template: "{{ media_type == 'clip' and has_real_frigate_event }}"
      sequence:
      - service: downloader.download_file
        data:
          url: "{{ frigate_clip_url }}"
          filename: "{{ clip_path }}"
        continue_on_error: true
      
      - delay:
          seconds: 1
      
      - choose:
        - conditions:
          - condition: template
            value_template: "{{ states('sensor.file_exists') == 'on' }}"
          sequence:
          - service: telegram_bot.send_video
            data:
              target: !input telegram_target
              file: "{{ clip_path }}"
              caption: "{{ camera_name }}{{ time_suffix }} - analyzing..."
        default:
        - service: camera.snapshot
          target:
            entity_id: "{{ camera_entity }}"
          data:
            filename: "{{ snapshot_path }}"
        - service: telegram_bot.send_photo
          data:
            target: !input telegram_target
            file: "{{ snapshot_path }}"
            caption: "{{ camera_name }}{{ time_suffix }} - analyzing... (clip unavailable)"
    
    # Frigate GIF
    - conditions:
      - condition: template
        value_template: "{{ media_type == 'gif' and has_real_frigate_event }}"
      sequence:
      - service: downloader.download_file
        data:
          url: "{{ frigate_gif_url }}"
          filename: "{{ gif_path }}"
        continue_on_error: true
      
      - delay:
          seconds: 1
      
      - choose:
        - conditions:
          - condition: template
            value_template: "{{ states('sensor.file_exists') == 'on' }}"
          sequence:
          - service: telegram_bot.send_animation
            data:
              target: !input telegram_target
              file: "{{ gif_path }}"
              caption: "{{ camera_name }}{{ time_suffix }} - analyzing..."
        default:
        - service: camera.snapshot
          target:
            entity_id: "{{ camera_entity }}"
          data:
            filename: "{{ snapshot_path }}"
        - service: telegram_bot.send_photo
          data:
            target: !input telegram_target
            file: "{{ snapshot_path }}"
            caption: "{{ camera_name }}{{ time_suffix }} - analyzing... (GIF unavailable)"

  # OPTIMIZED MULTI-MODEL FALLBACK WITH TOGGLEABLE DIAGNOSTICS
  - variables:
      analysis_success: false
      successful_model: ""
      analysis_result: ""
      model_attempt: 0
      start_time: "{{ now().timestamp() }}"

  # Diagnostic header (only if diagnostics enabled)
  - if:
    - condition: template
      value_template: "{{ enable_diagnostics and detailed_error_logging }}"
    then:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: |
          🔬 DIAGNOSTIC START: {{ camera_name }} {{ time_suffix }}
          Models to test: {{ primary_models | join(' → ') }}
          {% if diagnostic_prompt_info %}
          Prompt length: {{ enhanced_ai_prompt | length }} chars
          Prompt preview: "{{ enhanced_ai_prompt[:100] }}..."
          {% endif %}

  # Try all primary models with CONDITIONAL diagnostics
  - repeat:
      while:
        - condition: template
          value_template: "{{ not analysis_success and model_attempt < (primary_models | length) }}"
      sequence:
      - variables:
          current_model: "{{ primary_models[model_attempt] }}"
          attempt_start_time: "{{ now().timestamp() }}"
      
      - if:
        - condition: template
          value_template: "{{ model_attempt > 0 and show_fallback_notifications }}"
        then:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "🔄 {{ camera_name }} - {{ primary_models[model_attempt-1] }} failed, trying {{ current_model }}..."
      
      # Try current model
      - service: llmvision.stream_analyzer
        data:
          image_entity: ["{{ camera_entity }}"]
          duration: !input duration
          provider: !input provider
          model: "{{ current_model }}"
          message: "{{ enhanced_ai_prompt }}"
          max_frames: !input max_frames
          target_width: !input target_width
          max_tokens: !input max_tokens
          use_memory: "{{ model_attempt == 0 and use_memory }}"
          remember: "{{ model_attempt == 0 and store_timeline }}"
          generate_title: "{{ model_attempt == 0 and store_timeline }}"
          expose_images: "{{ model_attempt == 0 and store_timeline }}"
          include_filename: true
        response_variable: current_response
        continue_on_error: true
      
      - variables:
          attempt_end_time: "{{ now().timestamp() }}"
          response_time: "{{ (attempt_end_time | float) - (attempt_start_time | float) }}"
          response_text: "{{ current_response.get('response_text', '') if current_response is defined else '' }}"
          response_error: "{{ current_response.get('error', 'none') if current_response is defined else 'undefined_response' }}"
          response_status: "{{ current_response.get('status', 'unknown') if current_response is defined else 'no_response' }}"
          is_valid: >
            {% set text = response_text %}
            {% if text == '' or 
                 'Couldn\'t generate content' in text or 
                 'Check logs for details' in text or 
                 'API failed' in text or 
                 'Error:' in text or 
                 'overloaded' in text %}
              false
            {% else %}
              true
            {% endif %}
      
      # CONDITIONAL DIAGNOSTIC LOGGING (only if diagnostics enabled)
      - if:
        - condition: template
          value_template: "{{ enable_diagnostics and detailed_error_logging and (not is_valid or log_successful_attempts) }}"
        then:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: |
              🔍 DIAGNOSTIC: {{ current_model }}
              ⏱️ Response time: {{ "%.2f"|format(response_time|float) }}s
              ✅ Valid response: {{ is_valid }}
              📊 Status: {{ response_status }}
              ❌ Error: {{ response_error }}
              {% if log_response_metadata and current_response is defined %}
              📝 Full response object keys: {{ current_response.keys() | list | join(', ') }}
              {% endif %}
              💬 Response (first 200 chars): "{{ response_text[:200] }}{{ '...' if response_text|length > 200 else '' }}"
              {% if not is_valid %}
              🚨 FAILURE REASON: {% if response_text == '' %}Empty response{% elif 'Couldn\'t generate content' in response_text %}Content generation failed{% elif 'overloaded' in response_text %}Model overloaded{% elif 'API failed' in response_text %}API error{% else %}Unknown error{% endif %}
              {% endif %}

      # Check if this model succeeded
      - if:
        - condition: template
          value_template: "{{ is_valid }}"
        then:
        - variables:
            analysis_success: true
            successful_model: "{{ current_model }}"
            analysis_result: "{{ response_text }}"
        else:
        - variables:
            model_attempt: "{{ model_attempt + 1 }}"

  # SECONDARY PROVIDER FALLBACK (if all primary models failed)
  - if:
    - condition: template
      value_template: "{{ not analysis_success and enable_secondary_provider and secondary_provider is not none and secondary_provider != '' }}"
    then:
    - if:
      - condition: template
        value_template: "{{ show_fallback_notifications }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🆘 {{ camera_name }} - All primary models failed, trying secondary provider..."
    
    - variables:
        secondary_attempt: 0
        secondary_success: false
    
    # Try secondary models with conditional diagnostics
    - repeat:
        while:
          - condition: template
            value_template: "{{ not secondary_success and secondary_attempt < (secondary_models | length) }}"
        sequence:
        - variables:
            current_secondary_model: "{{ secondary_models[secondary_attempt] }}"
            secondary_start_time: "{{ now().timestamp() }}"
        
        # Try current secondary model
        - service: llmvision.stream_analyzer
          data:
            image_entity: ["{{ camera_entity }}"]
            duration: !input duration
            provider: !input secondary_provider
            model: "{{ current_secondary_model }}"
            message: "{{ enhanced_ai_prompt }}"
            max_frames: !input max_frames
            target_width: !input target_width
            max_tokens: !input max_tokens
            use_memory: false
            remember: false
            generate_title: false
            expose_images: false
            include_filename: true
          response_variable: secondary_response
          continue_on_error: true
        
        - variables:
            secondary_end_time: "{{ now().timestamp() }}"
            secondary_response_time: "{{ (secondary_end_time | float) - (secondary_start_time | float) }}"
            secondary_text: "{{ secondary_response.get('response_text', '') if secondary_response is defined else '' }}"
            secondary_valid: >
              {% set text = secondary_text %}
              {% if text == '' or 
                   'Couldn\'t generate content' in text or 
                   'Check logs for details' in text or 
                   'API failed' in text or 
                   'Error:' in text or 
                   'overloaded' in text %}
                false
              {% else %}
                true
              {% endif %}
        
        # Conditional diagnostic logging for secondary
        - if:
          - condition: template
            value_template: "{{ enable_diagnostics and detailed_error_logging }}"
          then:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: |
                🔍 SECONDARY DIAGNOSTIC: {{ current_secondary_model }}
                ⏱️ Response time: {{ "%.2f"|format(secondary_response_time|float) }}s
                ✅ Valid response: {{ secondary_valid }}
                💬 Response: "{{ secondary_text[:150] }}{{ '...' if secondary_text|length > 150 else '' }}"
        
        - if:
          - condition: template
            value_template: "{{ secondary_valid }}"
          then:
          - variables:
              analysis_success: true
              secondary_success: true
              successful_model: "{{ current_secondary_model }} (secondary)"
              analysis_result: "{{ secondary_text }}"
          else:
          - variables:
              secondary_attempt: "{{ secondary_attempt + 1 }}"

  # Conditional diagnostic summary
  - if:
    - condition: template
      value_template: "{{ enable_diagnostics and detailed_error_logging }}"
    then:
    - variables:
        total_time: "{{ (now().timestamp() | float) - (start_time | float) }}"
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: |
          🔬 DIAGNOSTIC SUMMARY: {{ camera_name }}
          ⏱️ Total analysis time: {{ "%.2f"|format(total_time|float) }}s
          🎯 Successful model: {{ successful_model if analysis_success else "NONE" }}
          📊 Models tested: {{ model_attempt + 1 }}/{{ primary_models | length }} primary
          {% if enable_secondary_provider and not analysis_success %}+ {{ secondary_attempt }}/{{ secondary_models | length }} secondary{% endif %}
          ✅ Final result: {{ "SUCCESS" if analysis_success else "ALL FAILED" }}

  # SEND SUCCESSFUL ANALYSIS RESULT OR FINAL FALLBACK
  - choose:
    # Success - At least one model worked
    - conditions:
      - condition: template
        value_template: "{{ analysis_success }}"
      sequence:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: >
            {{ analysis_result }}{% if show_model_usage %} ({{ successful_model }}){% endif %}
    
    # ALL MODELS FAILED - Use final fallback
    default:
    - if:
      - condition: template
        value_template: "{{ enable_final_fallback }}"
      then:
      - if:
        - condition: template
          value_template: "{{ show_api_errors }}"
        then:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "🚨 {{ camera_name }}{{ time_suffix }} - All AI models failed - using basic fallback"
      
      # Send fallback notification based on mode
      - choose:
        - conditions:
          - condition: template
            value_template: "{{ fallback_mode == 'simple_notification' }}"
          sequence:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "{{ camera_name }} motion detected (All AI unavailable)"
        
        - conditions:
          - condition: template
            value_template: "{{ fallback_mode == 'time_based' }}"
          sequence:
          - service: telegram_bot.send_message
            data:
              target: !input telegram_target
              message: "{{ time_based_message }} (All AI unavailable)"
        
        # Silent mode - do nothing
        default: []
      else:
      # No final fallback enabled
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "❌ {{ camera_name }}{{ time_suffix }} - All AI analysis failed"

# Automation cooldown delay (using minutes)
- if:
  - condition: template
    value_template: "{{ not is_manual_trigger and cooldown_minutes > 0 }}"
  then:
  - delay:
      minutes: !input cooldown_minutes
