blueprint:
  name: AI Event Summary (Telegram Bot v1.6.3)
  author: Perplexity AI - QC and fixes with safer template, defaults, and anonymized examples
  homeassistant:
    min_version: 2024.10.0
  description: >
    AI-powered summaries for cameras with Telegram notifications.
    Includes safer template handling, no real API keys in defaults,
    cooldown set to 1 minute, and improved default parameters.
  domain: automation
  input:
    run_conditions:
      name: Run Conditions
      description: Conditions that must be met for automation to run.
      default: []
      selector:
        condition: {}
    cooldown:
      name: Cooldown
      description: Time to wait between notifications.
      default:
        minutes: 1
      selector:
        duration: {}
    camera_sensor_section:
      name: Camera & Sensor Settings
      description: Configure cameras and motion sensors.
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: Cameras to monitor.
          default: []
          selector:
            entity:
              domain: camera
              multiple: true
        trigger_state:
          name: Trigger State
          description: State to trigger automation.
          default: recording
          selector:
            text:
              multiline: false
        motion_sensors:
          name: Motion Sensors
          description: Linked motion sensors.
          default: []
          selector:
            entity:
              domain: binary_sensor
              multiple: true
        duration:
          name: Analysis Duration (seconds)
          description: Duration for AI video analysis.
          default: 15
          selector:
            number:
              min: 1
              max: 60
              step: 1
        max_frames:
          name: Max Frames
          description: Number of frames to analyze.
          default: 10
          selector:
            number:
              min: 1
              max: 60
              step: 1
    ai_section:
      name: AI Settings
      icon: mdi:brain
      collapsed: true
      input:
        provider:
          name: AI Provider
          description: AI provider for analysis
          selector:
            config_entry:
              integration: llmvision
        model:
          name: Model
          description: AI model to use
          default: gemini-2.5-flash-lite
          selector:
            text:
              multiline: false
        message:
          name: AI Prompt
          description: Prompt for AI analysis
          default: >
            Summarize the events focusing on moving subjects. If no motion, reply 'No activity observed.'
          selector:
            text:
              multiline: true
        max_tokens:
          name: Max Tokens
          description: Max tokens to generate for summary
          default: 100
          selector:
            number:
              min: 1
              max: 300
              step: 1
        remember:
          name: Store event in Timeline
          description: Keep this event for queries.
          default: true
          selector:
            boolean: {}
        use_memory:
          name: Use Memory Context
          default: false
          selector:
            boolean: {}
    notification_section:
      name: Notification Settings
      icon: mdi:telegram
      collapsed: true
      input:
        telegram_config_entry_id:
          name: Telegram Bot Config Entry ID
          description: Config entry ID of your Telegram bot (example below anonymized)
          default: telegram_bot_xxxxxxxx_xxxxxxxx
          selector:
            text:
              multiline: false
        telegram_target:
          name: Telegram Chat ID(s)
          description: Chat ID or JSON list of chat IDs (e.g., 123456789 or [123456789,987654321])
          default: "123456789"
          selector:
            text:
              multiline: false
        condition_notify:
          name: Condition to Notify
          description: Optional conditions before notification is sent.
          default: []
          selector:
            condition: {}
        delay_notification:
          name: Notification Cooldown
          default: 60
          selector:
            number:
              min: 0
              max: 86400
              unit_of_measurement: seconds
              mode: box
              step: 1
        file_path:
          name: Snapshot File Path
          description: Path to snapshot image for Telegram photo.
          default: /media/snapshots/{{ camera_file_path }}/last_motion.jpg
          selector:
            text:
              multiline: false
        show_filtered_events:
          name: Show Filtered (Passive) Events
          description: Whether to send notification for passive importance.
          default: false
          selector:
            boolean: {}
    experimental_section:
      name: Experimental Settings
      icon: mdi:brain
      collapsed: true
      input:
        additional_actions:
          name: Additional Actions
          description: Additional actions to run after main actions.
          default: []
          selector:
            action: {}

variables:
  telegram_config_entry_id: !input telegram_config_entry_id
  telegram_target: !input telegram_target
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  camera_entity: >
    {% if motion_sensors_list and not trigger.entity_id.startswith('camera.') and
          trigger.entity_id in motion_sensors_list %}
      {% set idx = motion_sensors_list.index(trigger.entity_id) %}
      {{ camera_entities_list[idx] if idx < (camera_entities_list|length) else trigger.entity_id }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  camera_entity_snapshot: >
    {{ camera_entities_list[0] if camera_entities_list|length > 0 else 'none' }}
  camera_file_path: >
    {% if camera_entity_snapshot != 'none' %}
      {{ camera_entity_snapshot.replace('camera.', '') }}
    {% else %}
      'unknown_camera'
    {% endif %}
  file_path: !input file_path

trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
  - platform: state
    entity_id: !input motion_sensors
    to: 'on'

condition:
  - condition: and
    conditions: !input run_conditions

action:
  - alias: Send initial timestamp notification
    service: telegram_bot.send_message
    data:
      config_entry_id: "{{ telegram_config_entry_id }}"
      target: >-
        {{
          (telegram_target | from_json if telegram_target.startswith('[')
            else [telegram_target | int])
        }}
      message: "Event detected at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      parse_mode: html

  - alias: AI analysis
    action: llmvision.stream_analyzer
    data:
      image_entity: '{{ [camera_entity] }}'
      duration: !input duration
      provider: !input provider
      model: !input model
      message: !input message
      max_tokens: !input max_tokens
      use_memory: !input use_memory
      remember: !input remember
      important: !input important
      expose_images: true
      generate_title: true
      include_filename: true
      max_frames: !input max_frames
      target_width: 1280
    response_variable: response

  - delay:
      seconds: !input delay_notification

  - alias: Check importance and send notification
    choose:
      - conditions:
          - condition: template
            value_template: >
              {{ (importance_filtering | default(false)) and (importance.response_text | default('') | lower) == 'passive' }}
        sequence:
          - if:
              - condition: template
                value_template: '{{ show_filtered_events }}'
            then:
              - service: telegram_bot.send_message
                data:
                  target: "{{ telegram_target }}"
                  message: "ðŸ”‡ {{ camera | default('Unknown Camera') }} - Filtered (passive) - no alert sent"
            - stop: 'Event is not important'

  - alias: Send AI analysis result
    if:
      - condition: template
        value_template: "{{ telegram_config_entry_id != '' and telegram_target != '' }}"
    then:
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ response.key_frame is defined and response.key_frame and
                     (response.key_frame.startswith('http://') or response.key_frame.startswith('https://')) }}
            sequence:
              - service: telegram_bot.send_photo
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                         else [telegram_target | int])
                    }}
                  url: "{{ response.key_frame }}"
                  caption: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html
          - conditions:
              - condition: template
                value_template: >
                  {{ response.key_frame is defined and response.key_frame and response.key_frame.startswith('/') }}
            sequence:
              - service: telegram_bot.send_photo
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                         else [telegram_target | int])
                    }}
                  file: "{{ response.key_frame }}"
                  caption: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html
          - conditions: []
            sequence:
              - service: telegram_bot.send_message
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                         else [telegram_target | int])
                    }}
                  message: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html

  - choose: []
    default: !input additional_actions

max_exceeded: silent
mode: single
