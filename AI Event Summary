blueprint:
  name: AI Event Summary with Telegram (Enhanced v1.5.3)
  author: valentinfrlch (modified for Telegram - rebuilt)
  homeassistant:
    min_version: 2024.10.0
  description: 'AI-powered camera event summaries with smart filtering, timeline storage, memory integration, and API fallback handling.'
  domain: automation
  input:
    telegram_section:
      name: Telegram Settings
      icon: mdi:telegram
      input:
        telegram_target:
          name: Telegram Chat ID
          description: The chat ID to send notifications to
          default: "7882720724"
          selector:
            text: {}
        notification_time:
          name: Notification Time Format
          description: Add time to notification messages
          default: "12hour"
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: "none"
                - label: "12 Hour Format (3:45 PM)"
                  value: "12hour"
                - label: "24 Hour Format (15:45)"
                  value: "24hour"
    camera_section:
      name: Camera Settings
      icon: mdi:camera
      input:
        camera_entities:
          name: Camera Entities
          description: Camera entities to monitor (can select multiple)
          selector:
            entity:
              multiple: true
              domain: camera
        motion_sensors:
          name: Motion Sensors (Optional)
          description: Motion sensors for cameras (same order as cameras). Leave empty if cameras change state directly.
          default: []
          selector:
            entity:
              multiple: true
              domain: binary_sensor
        trigger_state:
          name: Camera Trigger State
          description: State that triggers the automation for cameras
          default: "recording"
          selector:
            text: {}
        cooldown_minutes:
          name: Cooldown (Minutes)
          description: Wait time before allowing another notification for the same camera
          default: 5
          selector:
            number:
              min: 0
              max: 60
              step: 1
        show_cooldown_messages:
          name: Show Cooldown Messages
          description: Send a message when events are skipped due to cooldown (for debugging)
          default: false
          selector:
            boolean: {}
    ai_section:
      name: AI Analysis Settings
      icon: mdi:brain
      input:
        primary_provider_model:
          name: Primary AI Provider & Model
          description: Main AI provider and model to use for analysis
          default: "google_gemini-2.5-flash"
          selector:
            select:
              options:
                # OpenAI
                - label: "OpenAI GPT-4o (Fast, intelligent, flexible)"
                  value: "openai_gpt-4o"
                - label: "OpenAI GPT-4o-mini (Fast, affordable, focused)"
                  value: "openai_gpt-4o-mini"
                # Google
                - label: "Google Gemini-2.5-pro (Powerful thinking model)"
                  value: "google_gemini-2.5-pro"
                - label: "Google Gemini-2.5-flash (Fast, affordable all-rounder)"
                  value: "google_gemini-2.5-flash"
                - label: "Google Gemini-2.5-flash-lite (Ultra-fast, basic tasks)"
                  value: "google_gemini-2.5-flash-lite"
                # Anthropic
                - label: "Anthropic Claude-opus-4-0 (Most powerful and capable)"
                  value: "anthropic_claude-opus-4-0"
                - label: "Anthropic Claude-sonnet-4-0 (High-performance reasoning)"
                  value: "anthropic_claude-sonnet-4-0"
                # Groq
                - label: "Groq Llama-4-maverick-17b (Most accurate)"
                  value: "groq_meta-llama/llama-4-maverick-17b-128e-instruct"
                - label: "Groq Llama-4-scout-17b (Fast)"
                  value: "groq_meta-llama/llama-4-scout-17b-16e-instruct"
                # OpenRouter (popular models)
                - label: "OpenRouter GPT-4o (via OpenRouter)"
                  value: "openrouter_openai/gpt-4o"
                - label: "OpenRouter Claude-3.5-sonnet (via OpenRouter)"
                  value: "openrouter_anthropic/claude-3.5-sonnet"
                - label: "OpenRouter Llama-3.1-70b (via OpenRouter)"
                  value: "openrouter_meta-llama/llama-3.1-70b-instruct"
        duration:
          name: Analysis Duration (Seconds)
          description: How long to record for analysis
          default: 5
          selector:
            number:
              min: 1
              max: 30
              step: 1
        max_frames:
          name: Maximum Frames
          description: Maximum number of frames to analyze
          default: 3
          selector:
            number:
              min: 1
              max: 15
              step: 1
        target_width:
          name: Image Width
          description: Resize images to this width (lower = faster, less detail)
          default: 1280
          selector:
            number:
              min: 512
              max: 1920
              step: 64
        max_tokens:
          name: Max Response Length
          description: Maximum length of AI response (higher = more detailed)
          default: 50
          selector:
            number:
              min: 10
              max: 200
              step: 10
        use_memory:
          name: Use Memory
          description: Use information stored in memory to provide additional context (requires LLMVision memory setup)
          default: false
          selector:
            boolean: {}
        store_timeline:
          name: Store in Timeline
          description: Store events in Home Assistant timeline for review
          default: true
          selector:
            boolean: {}
    fallback_section:
      name: API Fallback Settings
      icon: mdi:backup-restore
      input:
        enable_fallback:
          name: Enable API Fallback
          description: Use fallback behavior when AI API fails (quota exceeded, service unavailable, etc.)
          default: true
          selector:
            boolean: {}
        fallback_mode:
          name: Fallback Mode
          description: What to do when AI analysis fails
          default: "simple_notification"
          selector:
            select:
              options:
                - label: "Simple Notification (Motion detected only)"
                  value: "simple_notification"
                - label: "Time-based Message (Morning=delivery, Evening=visitor, etc.)"
                  value: "time_based"
                - label: "No Notification (Silent failure)"
                  value: "silent"
        show_api_errors:
          name: Show API Error Messages
          description: Send error details to Telegram when API fails (for debugging)
          default: false
          selector:
            boolean: {}
    filtering_section:
      name: Smart Filtering
      icon: mdi:filter
      input:
        importance_filtering:
          name: Enable Importance Filtering
          description: Use AI to filter out unimportant events
          default: true
          selector:
            boolean: {}
        minimum_importance:
          name: Minimum Importance Level
          description: Only send notifications for events at or above this level
          default: "time-sensitive"
          selector:
            select:
              options:
                - label: "All Events (No Filtering)"
                  value: "passive"
                - label: "Time-Sensitive and Critical Only"
                  value: "time-sensitive"
                - label: "Critical Events Only"
                  value: "critical"
        show_filtered_events:
          name: Show Filtered Events
          description: Send a brief message when events are filtered out
          default: false
          selector:
            boolean: {}

variables:
  camera_entities: !input camera_entities
  motion_sensors: !input motion_sensors
  telegram_target: !input telegram_target
  trigger_state: !input trigger_state
  cooldown_minutes: !input cooldown_minutes
  show_cooldown_messages: !input show_cooldown_messages
  importance_filtering: !input importance_filtering
  minimum_importance: !input minimum_importance
  show_filtered_events: !input show_filtered_events
  use_memory: !input use_memory
  store_timeline: !input store_timeline
  notification_time: !input notification_time
  enable_fallback: !input enable_fallback
  fallback_mode: !input fallback_mode
  show_api_errors: !input show_api_errors
  primary_provider_model: !input primary_provider_model
  
  is_manual_trigger: "{{ trigger is not defined }}"
  
  # Parse provider and model from combined selection
  primary_provider: "{{ primary_provider_model.split('_')[0] }}"
  primary_model: "{{ primary_provider_model.split('_', 1)[1] }}"
  
  # Time formatting
  time_prefix: >
    {% if notification_time == "12hour" %}
      {{ now().strftime("%-I:%M %p") + " " }}
    {% elif notification_time == "24hour" %}
      {{ now().strftime("%H:%M") + " " }}
    {% else %}
      {{ "" }}
    {% endif %}
  
  # Determine which camera triggered the event
  triggered_camera: >
    {% if is_manual_trigger %}
      {{ camera_entities[0] }}
    {% elif trigger.entity_id.startswith('camera.') %}
      {{ trigger.entity_id }}
    {% elif motion_sensors and trigger.entity_id in motion_sensors %}
      {% set sensor_index = motion_sensors.index(trigger.entity_id) %}
      {{ camera_entities[sensor_index] if sensor_index < camera_entities|length else camera_entities[0] }}
    {% else %}
      {{ camera_entities[0] }}
    {% endif %}
  
  camera_name: '{{ triggered_camera.replace("camera.", "").replace("_", " ").title() }}'
  snapshot_path: '/config/www/snapshots/{{ triggered_camera.replace("camera.", "") }}_snapshot.jpg'
  
  # Simplified cooldown using automation attributes
  cooldown_seconds: "{{ cooldown_minutes * 60 }}"
  last_triggered: "{{ this.attributes.last_triggered if this.attributes.last_triggered else '1970-01-01T00:00:00+00:00' }}"
  seconds_since_last: "{{ (as_timestamp(now()) - as_timestamp(last_triggered)) | int }}"
  cooldown_active: "{{ not is_manual_trigger and seconds_since_last < cooldown_seconds }}"

  # Fallback message based on time of day
  time_based_message: >
    {% set hour = now().hour %}
    {% if hour >= 6 and hour < 12 %}
      "Morning delivery or service visit detected"
    {% elif hour >= 12 and hour < 17 %}
      "Daytime visitor or delivery detected"
    {% elif hour >= 17 and hour < 22 %}
      "Evening visitor detected"
    {% else %}
      "Late night motion detected"
    {% endif %}

  # AI Prompts
  importance_prompt: >
    Analyze this security camera image and classify the event importance level.
    
    Respond with ONLY one of these words:
    - "passive" for unimportant events (shadows, leaves, small animals, normal background activity)
    - "time-sensitive" for notable events (people, vehicles, delivery persons, visitors)  
    - "critical" for urgent situations (suspicious behavior, potential security threats, emergencies)
    
    Consider the context and whether a homeowner would want to be notified about this event.

max_exceeded: silent
mode: single

trigger:
- platform: state
  entity_id: !input camera_entities
  to: !input trigger_state
  id: camera_trigger
- platform: state  
  entity_id: !input motion_sensors
  to: "on"
  id: motion_trigger

action:
# Manual trigger notification
- if:
  - condition: template
    value_template: "{{ is_manual_trigger }}"
  then:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "🔧 {{ time_prefix }}Manual trigger for {{ camera_name }} ({{ primary_provider }} {{ primary_model }})"

# Check cooldown (skip for manual triggers) - SILENT by default
- if:
  - condition: template
    value_template: "{{ cooldown_active }}"
  then:
  - if:
    - condition: template
      value_template: "{{ show_cooldown_messages }}"
    then:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: "⏰ {{ time_prefix }}{{ camera_name }} cooldown active ({{ seconds_since_last }}s of {{ cooldown_seconds }}s) - skipping"
  - stop: "Cooldown active for {{ camera_name }}"

# Take snapshot for importance analysis
- service: camera.snapshot
  target:
    entity_id: "{{ triggered_camera }}"
  data:
    filename: "{{ snapshot_path }}"

# Importance Classification (if enabled) - WITH ERROR HANDLING
- if:
  - condition: template
    value_template: "{{ importance_filtering and not is_manual_trigger }}"
  then:
  - service: llmvision.image_analyzer
    data:
      image_entity: ["{{ triggered_camera }}"]
      provider: "{{ primary_provider }}"
      model: "{{ primary_model }}"
      message: "{{ importance_prompt }}"
      include_filename: false
      target_width: !input target_width
      max_tokens: 5
    response_variable: importance_result
    continue_on_error: true

  # Check if importance analysis failed
  - if:
    - condition: template
      value_template: "{{ importance_result is not defined or importance_result.response_text is not defined }}"
    then:
    - if:
      - condition: template
        value_template: "{{ show_api_errors }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "⚠️ {{ time_prefix }}{{ camera_name }} - Importance API failed ({{ primary_provider }}), proceeding anyway"
    # Set fallback importance for filtering logic
    - variables:
        importance_result: 
          response_text: "time-sensitive"

  # Check if event meets minimum importance threshold - STOP SILENTLY IF NOT
  - if:
    - condition: template
      value_template: >
        {% set detected = importance_result.response_text.lower().strip() %}
        {% set min_level = minimum_importance %}
        {% if min_level == "passive" %}
          {{ false }}
        {% elif min_level == "time-sensitive" %}
          {{ detected not in ["time-sensitive", "critical"] }}
        {% elif min_level == "critical" %}
          {{ detected != "critical" }}
        {% else %}
          {{ false }}
        {% endif %}
    then:
    - if:
      - condition: template
        value_template: "{{ show_filtered_events }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🔇 {{ time_prefix }}{{ camera_name }} - Filtered ({{ importance_result.response_text }}) - no alert sent"
    - stop: "Event filtered - importance too low"

# Message 1: Combined timestamp + camera + image + analyzing caption
- service: telegram_bot.send_photo
  data:
    target: !input telegram_target
    file: "{{ snapshot_path }}"
    caption: "{{ time_prefix }}{{ camera_name }} - analyzing..."

# Main AI Analysis with comprehensive error handling
- service: llmvision.stream_analyzer
  data:
    image_entity: ["{{ triggered_camera }}"]
    duration: !input duration
    provider: "{{ primary_provider }}"
    model: "{{ primary_model }}"
    message: "Describe what you see in this security camera footage. Focus on any people, vehicles, or notable activity. Be concise."
    max_frames: !input max_frames
    target_width: !input target_width
    max_tokens: !input max_tokens
    use_memory: !input use_memory
    remember: !input store_timeline
    generate_title: !input store_timeline
    expose_images: !input store_timeline
  response_variable: analysis
  continue_on_error: true

# Handle AI analysis result or fallback
- choose:
  # Success - AI analysis worked
  - conditions:
    - condition: template
      value_template: "{{ analysis is defined and analysis.response_text is defined and analysis.response_text != '' }}"
    sequence:
    - service: telegram_bot.send_message
      data:
        target: !input telegram_target
        message: "{{ analysis.response_text }}"
  
  # Fallback - AI analysis failed
  - conditions:
    - condition: template
      value_template: "{{ enable_fallback }}"
    sequence:
    - if:
      - condition: template
        value_template: "{{ show_api_errors }}"
      then:
      - service: telegram_bot.send_message
        data:
          target: !input telegram_target
          message: "🚨 {{ time_prefix }}{{ camera_name }} - {{ primary_provider }} {{ primary_model }} failed (quota/service error) - using fallback"
    
    # Send fallback notification based on mode
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ fallback_mode == 'simple_notification' }}"
        sequence:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "{{ camera_name }} motion detected (AI unavailable)"
      
      - conditions:
        - condition: template
          value_template: "{{ fallback_mode == 'time_based' }}"
        sequence:
        - service: telegram_bot.send_message
          data:
            target: !input telegram_target
            message: "{{ time_based_message }} (AI unavailable)"
      
      # Silent mode - do nothing
      default: []

  # No fallback enabled - send error message
  default:
  - service: telegram_bot.send_message
    data:
      target: !input telegram_target
      message: "❌ {{ time_prefix }}{{ camera_name }} - AI analysis failed and no fallback configured"
