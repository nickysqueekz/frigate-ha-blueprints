blueprint:
  name: AI Event Summary (Telegram Only, Safe Entity with Timestamp v1.9)
  author: Perplexity AI - added missing input definitions and fixes
  homeassistant:
    min_version: 2024.10.0
  description: >
    AI event summaries for camera triggers, with initial timestamp notification followed by analyzed results,
    exclusively using Home Assistant telegram_bot integration.
  domain: automation
  input:
    run_conditions:
      name: Run Conditions
      description: Conditions that must all be true for automation to run.
      default: []
      selector:
        condition: {}
    cooldown:
      name: Cooldown
      description: Time to wait before next run.
      default:
        minutes: 10
      selector:
        duration: {}
    camera_entities:
      name: Camera Entities
      selector:
        entity:
          domain: camera
          multiple: true
    motion_sensors:
      name: Motion Sensors
      selector:
        entity:
          domain: binary_sensor
          multiple: true
    trigger_state:
      name: Trigger State
      default: recording
      selector:
        text:
          multiline: false
    provider:
      name: LLM Vision Provider
      selector:
        config_entry:
          integration: llmvision
    model:
      name: AI Model
      selector:
        text:
          multiline: false
    duration:
      name: Duration
      default: 5
      selector:
        number:
          min: 1
          max: 60
          step: 1
    max_frames:
      name: Max Frames
      default: 3
      selector:
        number:
          min: 1
          max: 60
          step: 1
    telegram_config_entry_id:
      name: Telegram Bot Config Entry ID
      selector:
        text:
          multiline: false
    telegram_target:
      name: Telegram Target Chat ID(s)
      selector:
        text:
          multiline: false
    file_path:
      name: Snapshot File Path
      default: /media/snapshots/{{ camera_file_path }}/last_motion.jpg
      selector:
        text:
          multiline: false
    important:
      name: Important Filter
      default: false
      selector:
        boolean: {}
    use_memory:
      name: Use Memory
      default: false
      selector:
        boolean: {}
    additional_actions:
      name: Additional Actions
      description: Additional actions to run after analysis and notification.
      default: []
      selector:
        action: {}
    delay_notification:
      name: Notification Cooldown (seconds)
      default: 60
      selector:
        number:
          min: 0
          max: 86400
          unit_of_measurement: seconds
          mode: box
          step: 1

variables:
  telegram_config_entry_id: !input telegram_config_entry_id
  telegram_target: !input telegram_target
  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  camera_entity: >
    {% if motion_sensors_list and not trigger.entity_id.startswith('camera.') %}
      {% if trigger.entity_id in motion_sensors_list %}
        {% set index = motion_sensors_list.index(trigger.entity_id) %}
        {% if index < camera_entities_list | length %}
          {{ camera_entities_list[index] }}
        {% else %}
          {{ trigger.entity_id }}
        {% endif %}
      {% else %}
        {{ trigger.entity_id }}
      {% endif %}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  tag: "{{ camera_entity + int(as_timestamp(now())) | string }}"
  camera_entity_snapshot: >
    {% if camera_entities_list and camera_entities_list|length > 0 %}
      {{ camera_entities_list[0] }}
    {% else %}
      none
    {% endif %}
  camera_file_path: >
    {% if camera_entity_snapshot != 'none' %}
      {{ camera_entity_snapshot.replace('camera.', '') }}
    {% else %}
      unknown_camera
    {% endif %}
  file_path: !input file_path

trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
  - platform: state
    entity_id: !input motion_sensors
    to: 'on'

condition:
  - condition: and
    conditions: !input run_conditions

action:
  # 1) Send timestamp message immediately
  - service: telegram_bot.send_message
    data:
      config_entry_id: "{{ telegram_config_entry_id }}"
      target: >-
        {{
          (telegram_target | from_json if telegram_target.startswith('[')
            else [telegram_target | int])
        }}
      message: "Event detected at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      parse_mode: html

  # 2) Analyze event
  - alias: Analyze event with LLM
    action: llmvision.stream_analyzer
    data:
      image_entity: >
        {% if camera_entity != 'none' %}{{ [camera_entity] }}{% else %}[] {% endif %}
      duration: !input duration
      provider: !input provider
      model: !input model
      message: >
        Summarize the event focusing on moving subjects only, ignoring static objects.
        If none, reply: 'No activity observed.'
      use_memory: !input use_memory
      important: !input important
      remember: false
      expose_images: true
      generate_title: true
      include_filename: true
      max_frames: !input max_frames
      target_width: 1280
      max_tokens: 20
    response_variable: response

  # 3) Wait for cooldown before sending further notifications
  - delay:
      seconds: !input delay_notification

  # 4) Send AI analysis results (photo or message)
  - if:
      - condition: template
        value_template: >
          {{ telegram_config_entry_id != '' and telegram_target != '' }}
    then:
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ response.key_frame is defined and response.key_frame and
                     (response.key_frame.startswith('http://') or response.key_frame.startswith('https://')) }}
            sequence:
              - service: telegram_bot.send_photo
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                         else [telegram_target | int])
                    }}
                  url: "{{ response.key_frame }}"
                  caption: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html
          - conditions:
              - condition: template
                value_template: >
                  {{ response.key_frame is defined and response.key_frame and response.key_frame.startswith('/') }}
            sequence:
              - service: telegram_bot.send_photo
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                         else [telegram_target | int])
                    }}
                  file: "{{ response.key_frame }}"
                  caption: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html
          - conditions: []
            sequence:
              - service: telegram_bot.send_message
                data:
                  config_entry_id: "{{ telegram_config_entry_id }}"
                  target: >-
                    {{
                      (telegram_target | from_json if telegram_target.startswith('[')
                         else [telegram_target | int])
                    }}
                  message: "{{ response.title }}\n\n{{ response.response_text }}"
                  parse_mode: html

  - choose: []
    default: !input additional_actions

max_exceeded: silent
mode: single
